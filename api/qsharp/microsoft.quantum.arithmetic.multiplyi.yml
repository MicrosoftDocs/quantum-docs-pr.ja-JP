### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyi
name: MultiplyI
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: 整数`xs`を整数`ys`で乗算し、結果を`result`に格納します。最初はゼロである必要があります。
remarks: >-
  標準のシフトアンド追加アプローチを使用して乗算を実装します。

  制御されたバージョンを改善するには、コントロール qubit の ancilla qubit に $x _i $ をコピーし、ancilla qubit に対する加算を制御します。
syntax: 'operation MultiplyI (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: xs
    summary: $n $-bit 被乗数 (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: $n $-bit 乗数 (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: result
    summary: $ 2n $ ビット結果 (LittleEndian) は、初期状態で $ \ket{0}$ である必要があります。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: fcb55b47c0d5ca82736e8c3da14190daffd2b414
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82679490"
