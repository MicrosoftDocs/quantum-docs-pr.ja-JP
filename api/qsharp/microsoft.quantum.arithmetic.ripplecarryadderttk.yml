### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.ripplecarryadderttk
name: RippleCarryAdderTTK
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  元に戻すことができ、2つの整数がインプレース適用されます。

  LittleEndian レジスタ `xs` と `ys`でエンコードされた2つの $n $ ビット整数と、qubit が渡された場合、演算は、結果の最下位ビットが `ys` に保持されて $n いる2つの整数の合計を計算し、実行ビットは xor になります。qubit `carry`。
remarks: この操作には、RippleCarryAdderD および RippleCarryAdderCDKM と同じ機能がありますが、ancilla qubits は使用しません。
syntax: 'operation RippleCarryAdderTTK (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit) : Unit'
references: >-
  - Yasuhiro Takahashi、Seiichiro Tani、Noboru Kunihiro: "クォンタムの追加回路と無制限のファンアウト"、クォンタムの情報と計算、Vol. 10、2010。
    https://arxiv.org/abs/0910.2530
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit)'
  types:
  - name: xs
    summary: LittleEndian qubit レジスタは、最初の整数 summand をエンコードします。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: LittleEndian qubit レジスタエンコーディング2番目の整数 summand は、合計の最下位のビット $n を保持するように変更されています。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: carry
    summary: キャリー qubit, は、合計の最上位ビットを xor しています。
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 9c27164d8245c587b03c43606acebd0d156626bd
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73214488"
