### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.ripplecarryaddercdkm
name: RippleCarryAdderCDKM
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  元に戻すことができ、2つの整数がインプレース適用されます。

  LittleEndian レジスタ `xs` と `ys`でエンコードされた2つの $n $ ビット整数と、qubit が渡された場合、演算は、結果の最下位ビットが `ys` に保持されて $n いる2つの整数の合計を計算し、実行ビットは xor になります。qubit `carry`。
remarks: この操作には RippleCarryAdderD と同じ機能がありますが、$n $ の代わりに ancilla qubit を1つだけ使用します。
syntax: 'operation RippleCarryAdderCDKM (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit) : Unit'
references: >-
  - Cuccaro、Draper、Samuel、Kutin、David Petrie の: "新しいクォンタム ripple-キャリー追加回路", 2004 ですが、このようになります。
    https://arxiv.org/abs/quant-ph/0410184v1
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit)'
  types:
  - name: xs
    summary: LittleEndian qubit レジスタは、最初の整数 summand をエンコードします。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: 2番目の整数 summand を LittleEndian qubit レジスタにエンコードすると、その合計の最下位ビットを保持するように変更されます。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: carry
    summary: キャリー qubit, は、合計の最上位ビットを xor しています。
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
ms.openlocfilehash: 2d973659a9457c301ba65a282e4fd4b627c93671
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 10/31/2019
ms.locfileid: "73218483"
