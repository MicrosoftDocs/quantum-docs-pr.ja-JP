### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.ripplecarryaddercdkm
name: RippleCarryAdderCDKM
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  元に戻すことができ、2つの整数がインプレース適用されます。


  LittleEndian レジスタ`xs`にエンコードされた2つの $n $ `ys`ビット整数と、qubit が渡された場合、演算は2つの整数の合計を計算します。この2つの`ys`整数は、結果の最下位の $n $ が`carry`保持され、実行ビットは qubit に xor されます。
remarks: この操作には RippleCarryAdderD と同じ機能がありますが、$n $ の代わりに ancilla qubit を1つだけ使用します。
syntax: 'operation RippleCarryAdderCDKM (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit) : Unit'
references: >-
  - Cuccaro、Draper、Samuel、Kutin、David Petrie の: "新しいクォンタム ripple-キャリー追加回路", 2004 ですが、このようになります。
    https://arxiv.org/abs/quant-ph/0410184v1
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit)'
  types:
  - name: xs
    summary: LittleEndian qubit レジスタは、最初の整数 summand をエンコードします。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: 2番目の整数 summand を LittleEndian qubit レジスタにエンコードすると、その合計の最下位ビットを保持するように変更されます。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: carry
    summary: キャリー qubit, は、合計の最上位ビットを xor しています。
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: d75313cbc70643bc9cb96967c1b2eb928296f8d7
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82675128"
