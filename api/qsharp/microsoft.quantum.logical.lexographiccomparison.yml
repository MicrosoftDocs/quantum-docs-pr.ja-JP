### YamlMime:QSharpType
uid: microsoft.quantum.logical.lexographiccomparison
name: LexographicComparison
type: function
namespace: microsoft.quantum.logical
summary: 比較関数を指定した場合は、lexographically が2つの配列を比較する新しい関数を返します。
remarks: >-
  2つの配列間の lexographic 比較 `xs` `ys` は、次の手順で定義します。 とは2つの要素であり `x` `y` `elementComparison(x, y)` 、との `elementComparison(y, x)` 両方が true の場合は等価です。


  - 両方の配列は、等価でない要素の最初のペアまで、要素ごとに比較されます。 に従って最初に発生する要素を含む配列 `elementComparison` は、lexographical の順序で最初に発生すると言います。

  - 等価でない要素が見つからず、一方の配列が他方よりも長い場合、短い方の配列が最初に出現すると言われます。
syntax: "function LexographicComparison (elementComparison : (('T, 'T) -> Bool)) : (('T[], 'T[]) -> Bool)"
input:
  content: "(elementComparison : (('T, 'T) -> Bool))"
  types:
  - name: elementComparison
    summary: との2つの要素を比較し、 `x` `y` が以下の場合にを返す関数 `x` `y` 。
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
output:
  content: (('T[], 'T[]) -> Bool)
  types:
  - summary: との2つの配列を比較 `xs` `ys` し、 `xs` `ys` lexographical 順序でのの前後にが発生した場合にを返す関数。
    isFunction: true
    input:
      types:
      - isArray: true
        uid: "'T"
        isLocal: true
      - isArray: true
        uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
typeParameters:
- uid: "'T"
  summary: 比較対象の配列の要素の型。
seeAlso:
- microsoft.quantum.arrays.sorted
metadata:
  ms.openlocfilehash: c7b1ec454d7a87c344b0297007dff32fb6ee07a6
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91494346"
