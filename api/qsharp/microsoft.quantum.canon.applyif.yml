### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyif
name: ApplyIf
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  従来のビットで条件付き操作を適用します。


  `op`操作`bit`とビット値を指定した場合`op`は、 `target`が`bit` `true`の場合はに適用されます。 の`false`場合、には`target`何も起こりません。
examples: >-
  次の例では、値の`Bool`配列として指定された古典的なビット文字列によって表される計算基準の状態に qubits のレジスタを準備します。


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zip(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIf (op : ('T => Unit), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 条件付きで適用する操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: bit
    summary: op が適用されるかどうかを制御するブール値。
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 操作が適用される入力。
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 条件付きで適用される操作の入力型。
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
metadata:
  ms.openlocfilehash: b3a573c55d461eb3c1a2af0cb7bacd0a4cfecbe5
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676362"
