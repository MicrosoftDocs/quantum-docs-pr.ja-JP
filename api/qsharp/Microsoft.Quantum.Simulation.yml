### YamlMime:QSharpNamespace
uid: microsoft.quantum.simulation
name: Microsoft.Quantum.Simulation
summary: " # <a name=\"summary\"></a>Summary\n この名前空間には、クォンタムシステムのダイナミクスをシミュレートする一貫の関数と操作が含まれています。"
functions:
- uid: microsoft.quantum.simulation.addgeneratorsystems
  summary: 2つの `GeneratorSystem`を追加して、新しい `GeneratorSystem`を作成します。
- uid: microsoft.quantum.simulation.blockencodingbylcu
  summary: >-
    対象の演算子を `BlockEncoding`にエンコードします。


    これにより、一部の $H 演算子をエンコードする `BlockEncoding` の $U = pcdot V\ cdot P ^/ダガー $ が構築されます。U_j $ の関心は、unitaries います。 通常、$P $ は、$P \ket{0}\_a = \ sum_j\sqrt {\ alpha_j/\|\ vec-alpha\|\_2} \ket{j}\_$、$V = \sum_{j}\ket{j}\bra{j}\_aotimes U_ のような状態準備のためのものです。j $。
- uid: microsoft.quantum.simulation.blockencodingreflectionbylcu
  summary: >-
    対象の演算子を `BlockEncodingReflection`にエンコードします。


    これにより、一部の $H 演算子をエンコードする `BlockEncodingReflection` の $U = pcdot V\ cdot P ^/ダガー $ が構築されます。U_j $ の関心は、unitaries います。 通常、$P $ は、$P \ket{0}\_U_ {\ alpha_j/\|-vec\ket{j}\|\_2}\_$、および $V = \sum_{j}\ket{j}\bra{j}\_a/otimes という状態の準備を行うためのものです。j $。
- uid: microsoft.quantum.simulation.blockencodingtoreflection
  summary: >-
    `BlockEncoding` を同等の `BLockEncodingReflection`に変換します。


    つまり、$H の演算子をエンコードする `BlockEncoding` の $U $ があるとします。これは、同じ演算子をエンコードする `BlockEncodingReflection` $U ' $ に変換されますが、$U ' ^-ダガー = U ' $ にも適合します。

    これにより、$U $ の補助レジスタのサイズが 1 qubit だけ増加します。
- uid: microsoft.quantum.simulation.getgeneratorsystemfunction
  summary: '`GeneratorSystem`内の `GeneratorIndex` 関数を取得します。'
- uid: microsoft.quantum.simulation.getgeneratorsystemnterms
  summary: '`GeneratorSystem`内の用語の数を取得します。'
- uid: microsoft.quantum.simulation.identitygeneratorindex
  summary: Id 進化操作に対応する、ゼロ Hamiltonian、`H = 0`と一致するジェネレーターインデックスを返します。
- uid: microsoft.quantum.simulation.identitygeneratorsystem
  summary: 0 Hamiltonian `H = 0`と一貫性のあるジェネレーターシステムを返します。これは、id 進化操作に対応します。
- uid: microsoft.quantum.simulation.identitytimedependentgeneratorsystem
  summary: Hamiltonian `H(s) = 0`と一貫性のある、時間に依存するジェネレーターシステムを返します。
- uid: microsoft.quantum.simulation.interpolatedevolution
  summary: 一定のスケジュールで2つのジェネレーターの間を補間し、結果として得られる時間に依存するジェネレーターの下で、シミュレートされた進化を qubit レジスタに適用する操作を返します。
- uid: microsoft.quantum.simulation.interpolategeneratorsystems
  summary: 2つの `GeneratorSystem`間の線形補間を表す `TimeDependentGeneratorSystem` を返します。
- uid: microsoft.quantum.simulation.intstopaulis
  summary: 整数の配列をシングル qubit の演算子の配列に変換します。
- uid: microsoft.quantum.simulation.inttopauli
  summary: 整数をシングル qubit の P# li 演算子に変換します。
- uid: microsoft.quantum.simulation.multiplygeneratorindex
  summary: '`GeneratorIndex`の係数を乗算します。'
- uid: microsoft.quantum.simulation.multiplygeneratorsystem
  summary: '`GeneratorSystem`内のすべての用語の係数を乗算します。'
- uid: microsoft.quantum.simulation.pauliblockencoding
  summary: >-
    Hamiltonian のブロックエンコードのユニタリを作成します。


    Hamiltonian $H = \sum_{j}\alpha_j P_j $ は、j $ $P の合計によって記述されており、それぞれに実際の係数 $ \alpha_j $ が含まれています。
- uid: microsoft.quantum.simulation.paulicoefficientfromgenidx
  summary: '`GeneratorIndex`によって記述された、P・ Li 句の係数を抽出します。'
- uid: microsoft.quantum.simulation.paulievolutionfunction
  summary: Dynamical generator を simulatable ゲートのセットとして表し、拡張を p にします。
- uid: microsoft.quantum.simulation.paulievolutionset
  summary: Dynamical generator を simulatable ゲートのセットとして表し、拡張を p にします。
- uid: microsoft.quantum.simulation.paulistringfromgenidx
  summary: '`GeneratorIndex`によって記述された、psystem.string Li 文字列とその qubit インデックスを抽出します。'
- uid: microsoft.quantum.simulation.quantumwalkbyqubitization
  summary: >-
    `BlockEncodingReflection` をクォンタムウォークに変換します。


    つまり、ある演算子 $H $ of をエンコードする `BlockEncodingReflection` の $U $ がある場合は、$-pm e ^ {\ pm i\ sin ^{-1}(H)} $ の範囲を含むクォンタムウォーク $W $ に変換します。
- uid: microsoft.quantum.simulation.sumgeneratorsystems
  summary: 新しい GeneratorSystem を作成するために、複数の `GeneratorSystem`s を追加します。
- uid: microsoft.quantum.simulation.timedependenttrottersimulationalgorithm
  summary: Trotter – Suzuki 分解を使用して、時間に依存する型の式を解決する、ユニタリ演算子を概数にする `TimeDependentSimulationAlgorithm` 関数。
- uid: microsoft.quantum.simulation.trottersimulationalgorithm
  summary: Trotter – Suzuki 分解を使用して、時間進化演算子_exp (-iHt)_ を概算する `SimulationAlgorithm` 関数。
- uid: microsoft.quantum.simulation.trotterstep
  summary: Trotter – Suzuki 分解を使用して `EvolutionGenerator` で説明されているシステムによって、時間の経過を1回だけ実行する時間のステップを実装します。
operations:
- uid: microsoft.quantum.simulation.adiabaticstateenergyunitary
  summary: 入力状態に `statePrepUnitary` を適用することによって状態の準備を実行し、次に `adiabaticUnitary`を使用した adiabatic 状態の準備を行います。最後に、`phaseEstAlgorithm`を使用して結果の状態に `qpeUnitary`に関するフェーズの推定を行います。
- uid: microsoft.quantum.simulation.estimateenergy
  summary: '`phaseEstAlgorithm`を使用して、自動的に割り当てられた入力状態フェーズ推定に `statePrepUnitary` を適用 `qpeUnitary`することにより、状態の準備を実行します。'
- uid: microsoft.quantum.simulation.estimateenergywithadiabaticevolution
  summary: は、自動的に割り当てられた入力状態に `statePrepUnitary` を適用することによって状態の準備を実行した後、`adiabaticUnitary`を使用した adiabatic 状態の準備を行い、最後のフェーズ推定を `phaseEstAlgorithm`を使用して結果の状態に `qpeUnitary`します。
newtypes:
- uid: microsoft.quantum.simulation.blockencoding
  summary: >-
    任意の演算子が左上のブロックでエンコードされる場合の、その中の任意の演算子を指定します。


    つまり、`BlockEncoding` は、$U $ というです。この場合、システムレジスタ `s` に作用する任意の演算子 $H $ は、補助型 $ \ket{0}* $ に対応する左上のブロックでエンコードされます。 それです


    $ $ \begin{align} (\bra{0}/a \ otimes I_s) U (\ket{0}\ otimes I_s) = H \end{align} $ $。
- uid: microsoft.quantum.simulation.blockencodingreflection
  summary: リフレクションでもある `BlockEncoding` を表します。
- uid: microsoft.quantum.simulation.evolutiongenerator
  summary: >-
    Dynamical generator を simulatable ゲートのセットとして表し、拡張をその基準として表します。


    使用条件の最後のパラメーター。
- uid: microsoft.quantum.simulation.evolutionschedule
  summary: >-
    時間に依存する dynamical ジェネレーターを表します。


    `Double` パラメーターは、$ [0, 1] $ のスケジュールです。
- uid: microsoft.quantum.simulation.evolutionset
  summary: >-
    シミュレーションアルゴリズムを実装するために簡単に実装して使用できるゲートのセットを表します。


    セット内の要素は、<xref:microsoft.quantum.simulation.generatorindex>によってインデックスが作成されます。各セットは、`GeneratorIndex` から <xref:microsoft.quantum.simulation.evolutionunitary>までの関数によって記述されます。これは、時間を表す実数によってパラメーター化された操作です。
- uid: microsoft.quantum.simulation.evolutionunitary
  summary: >-
    ユニタリ時間の進化演算子を表します。


    1つ目のパラメーターは、時間の進化の期間であり、2番目のパラメーターは、ユニタリによって実行される qubit レジスタです。
- uid: microsoft.quantum.simulation.generatorindex
  summary: >-
    すべての dynamical ジェネレーターのセットに含まれる単一のプリミティブ用語を表します。たとえば、Hermitian 演算子は、そのジェネレーターから、`EvolutionSet`を通じて、そのジェネレーターによる時間の進化までのマップが存在します。


    最初の要素 (Int [], Double []) は、1つの用語にインデックスが付けられています。たとえば、P# li 文字列の場合は、係数0.5 を使用して、([1, 1, 2], [0.5]) によってインデックスが作成されます。 また、X cos φ + Y sin φなど、連続変数によってパラメーター化された Hamiltonians は、インスタンスを ([], [φ]) で表すことができます。 2番目の要素は、ジェネレーターが動作するサブシステムのインデックスを生成します。
- uid: microsoft.quantum.simulation.generatorsystem
  summary: >-
    `GeneratorIndex`es のコレクションを表します。


    このコレクションを1つのインデックス整数を使用して繰り返し処理します。コレクションのサイズは既知であると見なされます。
- uid: microsoft.quantum.simulation.simulationalgorithm
  summary: >-
    時間に依存しないシミュレーションアルゴリズムを表します。


    時間に依存しないシミュレーション手法によって、<xref:microsoft.quantum.simulation.evolutiongenerator> が変換されます。

    ある期間の時間の進化を時間単位で指定します。
- uid: microsoft.quantum.simulation.timedependentblockencoding
  summary: >-
    クロックレジスタによって制御される `BlockEncoding` を表します。


    つまり、`TimeDependentBlockEncoding` は、クロックレジスタの状態 $ \ket{k}_d $ によって制御される $U $ です。これにより、システム登録 `s` に作用する任意の演算子 $H 任意の演算子を、補助状態 $ \ket に対応する左上のブロックにエンコードすることが `d` @no__ $ (_d) それです


    $ $ \begin{align} (\bra{0}\_a\ otimes I_ {ds}) U (\ket{0}\_a\ otimes I_ {ds}) = \sum_{k}\ket{k}\bra{k}\_H_k。

    \end{align} $ $。
- uid: microsoft.quantum.simulation.timedependentgeneratorsystem
  summary: 時間に依存する dynamical ジェネレーターを、time から dynamical generator の値までの関数として表します。
- uid: microsoft.quantum.simulation.timedependentsimulationalgorithm
  summary: >-
    時間に依存するシミュレーションアルゴリズムを表します。


    時間に依存するシミュレーション手法によって、<xref:microsoft.quantum.simulation.evolutionschedule> が変換されます。

    ある期間の時間の進化を時間単位で示します。
- uid: microsoft.quantum.simulation.unitary
  summary: は、ユニタリ演算子での進化を表します。
metadata:
  ms.openlocfilehash: 05db213d04304a635e4e86e0f6c40f15bb81441a
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73215882"
