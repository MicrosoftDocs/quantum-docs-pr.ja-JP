### YamlMime:QSharpType
uid: microsoft.quantum.canon.decomposedintotimestepsca
name: DecomposedIntoTimeStepsCA
type: function
namespace: Microsoft.Quantum.Canon
summary: 指定された操作に対して Trotter – Suzuki インテグレーターを実装する操作を返します。
remarks: >-
  `order`と等しいを指定し`1`て呼び出された場合、この関数は、最も低い順序の Trotter – Suzuki インテグレーター $ $ \begin{align} S_1 (\ ラムダ) = \ prod_ {j = 1} ^ {m} e ^ {H_j \lambda}, によってシミュレートできる操作を返します。 \end{align} $ $ は、 [quant-ph/0508139 の](https://arxiv.org/abs/quant-ph/0508139)表記に従い、$/ラムダ $ を進化時間 (返された操作の最初の入力で\{表さ\}れる) にします。また、$ H_j _ {j = 1} ^ {m} $ は、dynamical ジェネレーターの`op(j, lambda, _)`セット (Hermitian) として統合されています。これにより、ジェネレーターは、' ^ {H_j \lambda} $ という単位で、ジェネレーターがシミュレートされます。 $e


  同様に、 `order`の`2`は、2番目の順序の対称 Trotter – Suzuki インテグレーター $ $ \begin{align} S_2 (\ ラムダ) = \ prod_ {j = 1} ^ {m} e ^ {H_k/ラムダ/2} \ prod_ {j ' ={1} m} ^ e ^ {H_ {j '} \ ラムダ/2} を返します。

  \end{align} $ $


  の`order`値が大きいほど、 [quant-ph/0508139](https://arxiv.org/abs/quant-ph/0508139)の再帰的な構築を使用して実装されます。
syntax: "function DecomposedIntoTimeStepsCA ((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int) : ((Double, 'T) => Unit is Adj + Ctl)"
references: '- [*Berry、G. Ahokas、Cleve、サンダース、のよう*になります。](https://arxiv.org/abs/quant-ph/0508139)'
input:
  content: "((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int)"
  types:
  - name: nSteps
    summary: 時間ステップに分解される操作の数。
    isPrimitive: true
    uid: Int
  - name: op
    summary: 分解のためのインデックス入力 (型`Int`) と時間入力 (型`Double`) を受け入れる操作。
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Int
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: trotterOrder
    summary: >-
      使用する Trotter – Suzuki インテグレーターの順序を選択します。

      注文1と注文2、4、6,...は現在サポートされています。
    isPrimitive: true
    uid: Int
output:
  content: ((Double, 'T) => Unit is Adj + Ctl)
  types:
  - summary: Trotter – Suzuki インテグレーターを実装するユニタリを返します。最初の`Double`パラメーターは統合ステップサイズで、2番目のパラメーターは操作対象のターゲットです。
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
typeParameters:
- uid: "'T"
  summary: 各時間ステップが動作する型。通常は、 `Qubit[]`また`Qubit`はのいずれかです。
metadata:
  ms.openlocfilehash: 1fdb15e9a28c24ac58f026a89779951b982edb27
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82680249"
