### YamlMime:QSharpType
uid: microsoft.quantum.canon.decomposedintotimestepsca
name: DecomposedIntoTimeStepsCA
type: function
namespace: microsoft.quantum.canon
summary: 指定された操作に対して Trotter – Suzuki インテグレーターを実装する操作を返します。
remarks: >-
  と等しいを指定して呼び出された場合 `order` `1` 、この関数は、最も低い順序の Trotter – Suzuki インテグレーター $ $ \begin{align} S_1 (\ ラムダ) = \ prod_ {j = 1} ^ {m} e ^ {H_j \lambda}, によってシミュレートできる操作を返します。 \end{align} $ $ は、 [quant-ph/0508139 の](https://arxiv.org/abs/quant-ph/0508139) 表記に従い、$/ラムダ $ を進化時間 (返された操作の最初の入力で表される) にします。また、$ H_j \{ _ \} {j = 1} ^ {m} $ は、Dynamical ジェネレーターのセット (Hermitian) として統合されています。これにより、ジェネレーターは、' ^ `op(j, lambda, _)` {H_j \lambda} $ という単位で、ジェネレーターがシミュレートされます。 $e


  同様に、 `order` のは、 `2` 2 番目の順序の対称 Trotter – Suzuki インテグレーター $ $ \begin{align} S_2 (\ ラムダ) = \ prod_ {j = 1} ^ {m} e ^ {H_k/ラムダ/2} \ prod_ {j ' = m} ^ {1} e ^ {H_ {j '} \ ラムダ/2} を返します。

  \end{align} $ $


  の値が大きいほど、 `order` [quant-ph/0508139](https://arxiv.org/abs/quant-ph/0508139)の再帰的な構築を使用して実装されます。
syntax: "function DecomposedIntoTimeStepsCA ((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int) : ((Double, 'T) => Unit is Adj + Ctl)"
references: '- [*Berry、G. Ahokas、Cleve、サンダース、のよう*になります。](https://arxiv.org/abs/quant-ph/0508139)'
input:
  content: "((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int)"
  types:
  - name: nSteps
    summary: 時間ステップに分解される操作の数。
    isPrimitive: true
    uid: Int
  - name: op
    summary: 分解のためのインデックス入力 (型 `Int` ) と時間入力 (型) を受け入れる操作 `Double` 。
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Int
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: trotterOrder
    summary: >-
      使用する Trotter – Suzuki インテグレーターの順序を選択します。

      注文1と注文2、4、6,...は現在サポートされています。
    isPrimitive: true
    uid: Int
output:
  content: ((Double, 'T) => Unit is Adj + Ctl)
  types:
  - summary: Trotter – Suzuki インテグレーターを実装するユニタリを返します。最初のパラメーターは `Double` 統合ステップサイズで、2番目のパラメーターは操作対象のターゲットです。
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
typeParameters:
- uid: "'T"
  summary: 各時間ステップが動作する型。通常は、 `Qubit[]` またはのいずれか `Qubit` です。
metadata:
  ms.openlocfilehash: 435d63b6b5e8e36d240b964e14368a89e86cb4a6
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91471730"
