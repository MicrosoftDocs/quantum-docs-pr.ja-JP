### YamlMime:QSharpType
uid: microsoft.quantum.characterization.estimatefrequency
name: EstimateFrequency
type: operation
namespace: microsoft.quantum.characterization
summary: 準備と測定値を指定すると、指定された数の試行回数を実行することで、測定が成功する頻度 (を返します) を推定し `Zero` ます。
syntax: 'operation EstimateFrequency (preparation : (Qubit[] => Unit), measurement : (Qubit[] => Result), nQubits : Int, nMeasurements : Int) : Double'
input:
  content: '(preparation : (Qubit[] => Unit), measurement : (Qubit[] => Result), nQubits : Int, nMeasurements : Int)'
  types:
  - name: preparation
    summary: 入力レジスタに特定の状態 $ \rho $ を準備する、$ $P の操作。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: measurement
    summary: 対象の測定値を表す $ $M 演算。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Result
  - name: nQubits
    summary: 準備と測定がそれぞれ作用する qubits の数。
    isPrimitive: true
    uid: Int
  - name: nMeasurements
    summary: 対象の頻度を推定するために測定を実行する回数。
    isPrimitive: true
    uid: Int
output:
  content: Double
  types:
  - summary: >-
      \Hat{p} (P (\ket{00 \ ドット 0} \bra{00 \) $) $ が返さ $M れる頻度の推定 $ $ は、 `Zero` バイアスをかける二項分出し $ \hat{p} = n \_ {\uparrow}/n {\text{measurements}} $ を使用して取得し \_ ます。ここで、$n \_ {\uparrow} $ は観測された結果の数です `Zero` 。


      これは、物理的な制限を尊重するターゲットコンピューターでは特に重要であり、確率を測定できないようにします。
    isPrimitive: true
    uid: Double
metadata:
  ms.openlocfilehash: 008a3276e0df9c587f3262f4b5358a0831260ae4
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89354588"
