### YamlMime:QSharpType
uid: microsoft.quantum.canon.approximatelymultiplexpauli
name: ApproximatelyMultiplexPauli
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  Qubits の配列で条件付きの回転を適用し、指定された許容範囲に従って小さな回転角度を切り捨てます。


  これは、$n $ qubit number $ \ket{j} $ によって制御されている場合に、single qubit p Li operator $P $ の角度 $ \ theta_j $ によって回転を実行する、多重制御された、乗算操作を適用します。

  特に、この操作のアクションは、ユニタリによって表されます。


  $ $ \begin{align} U = \ sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}/otimes e ^ {i P \ theta_j}。

  \end{align}


  ##
remarks: $ 2 ^ n $ よりも小さい場合、`coefficients` には $ \ theta_j = $0.0 要素が埋め込まれます。
syntax: 'operation ApproximatelyMultiplexPauli (tolerance : Double, coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
input:
  content: '(tolerance : Double, coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: tolerance
    summary: 小さい係数が切り捨てられる公差。
    isPrimitive: true
    uid: Double
  - name: coefficients
    summary: $ 2 ^ n $ 係数 $ \ theta_j $ までの配列。 $J $ th 係数は、リトルエンディアン形式でエンコードされた数値の状態 $ \ket{j} $ にインデックスを付けます。
    isArray: true
    isPrimitive: true
    uid: Double
  - name: pauli
    summary: 回転の軸を決定する p$P li 演算子。
    isPrimitive: true
    uid: Pauli
  - name: control
    summary: 数値の状態をリトルエンディアン形式でエンコードする $-qubit コントロールレジスタ $n ます。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: $E ^ {i P \ theta_j} $ によって回転された1つの qubit レジスタ。
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- multiplexpauli
metadata:
  ms.openlocfilehash: e3b828de03845724fc1cad78babfff0c01b8ae24
  ms.sourcegitcommit: 6ccea4a2006a47569c4e2c2cb37001e132f17476
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 02/28/2020
  ms.locfileid: "77907938"
