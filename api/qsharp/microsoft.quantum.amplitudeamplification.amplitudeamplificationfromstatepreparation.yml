### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.amplitudeamplificationfromstatepreparation
name: AmplitudeAmplificationFromStatePreparation
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 部分的な反射のための oracles による振幅増幅。
remarks: >-
  これにより、の`AmpAmpByReflectionPhases`開始と送信先の状態の形式に対してより厳密な条件が課されます。

  ターゲットの状態が $ \ket{1}\_f $ によってマークされていることを前提としています。

  \Begin{align}{0}\_A\ket {f{0}\_} \ket s{1}\_= \lambda\ket f\ket {\ text {target}}\_s + \sqrt{1-| \ ラムダ | ^ 2} \ket \end{align} \ket | \{0}\_lambda | ^ 2} \ket (ほとんど`flagQubit`の`auxiliaryRegister`場合、) は、${0}\_{f}{0}\_s $ の状態で初期化されることを前提としています。
syntax: 'function AmplitudeAmplificationFromStatePreparation (phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
input:
  content: '(phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: phases
    summary: 部分的な反射のフェーズ
    uid: microsoft.quantum.amplitudeamplification.reflectionphases
  - name: stateOracle
    summary: 開始状態を準備する oracle $A $ のユニタリ
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: フラグ qubit へのインデックス
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 部分的な反射によって実装される、oracles による振幅増幅を実装する操作。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: 2d29383db3cebfe1848a1fcee3115fcee0825d4d
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676962"
