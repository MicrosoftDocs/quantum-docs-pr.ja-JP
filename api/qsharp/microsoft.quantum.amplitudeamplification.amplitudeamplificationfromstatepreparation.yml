### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.amplitudeamplificationfromstatepreparation
name: AmplitudeAmplificationFromStatePreparation
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 部分的な反射のための oracles による振幅増幅。
remarks: >-
  これにより、`AmpAmpByReflectionPhases`よりも、開始状態とターゲット状態の形式に対してより厳密な条件が課されます。

  ターゲットの状態が $ \ket{1}\_f $ によってマークされていることを前提としています。

  \Begin{align} A\ket{0}\_{f} \ket{0}\_s = \lambda\ket{1}\_f\ket {\ text {target}}\_s + \sqrt{1-| \ ラムダ | ^ 2} \ket{0}\_f\ cドット、\end{align} は、ほとんどの場合、`flagQubit` は $ \ket `auxiliaryRegister`{0}{f} \ket \_{0}s $ という状態で初期化されることを前提としています。
syntax: 'function AmplitudeAmplificationFromStatePreparation (phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
input:
  content: '(phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: phases
    summary: 部分的な反射のフェーズ
    uid: microsoft.quantum.amplitudeamplification.reflectionphases
  - name: stateOracle
    summary: 開始状態を準備する oracle $A $ のユニタリ
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: フラグ qubit へのインデックス
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 部分的な反射によって実装される、oracles による振幅増幅を実装する操作。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: b31e601e5e5564ba26bc2f5b9a66a8fecd5e3786
  ms.sourcegitcommit: ca5015fed409eaf0395a89c2e4bc6a890c360aa2
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/29/2020
  ms.locfileid: "76872497"
