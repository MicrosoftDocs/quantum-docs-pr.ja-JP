### YamlMime:QSharpType
uid: microsoft.quantum.characterization.quantumphaseestimation
name: QuantumPhaseEstimation
type: operation
namespace: microsoft.quantum.characterization
summary: 指定された oracle に対してクォンタムフェーズ推定アルゴリズムを実行し `U` `targetState` 、フェーズをビッグエンディアンクォンタムレジスタに読み込みます。
syntax: 'operation QuantumPhaseEstimation (oracle : Microsoft.Quantum.Oracles.DiscreteOracle, targetState : Qubit[], controlRegister : Microsoft.Quantum.Arithmetic.BigEndian) : Unit'
input:
  content: '(oracle : Microsoft.Quantum.Oracles.DiscreteOracle, targetState : Qubit[], controlRegister : Microsoft.Quantum.Arithmetic.BigEndian)'
  types:
  - name: oracle
    summary: 指定された整数の $U ^ m $ を実装する操作は、m を累乗します。
    uid: microsoft.quantum.oracles.discreteoracle
  - name: targetState
    summary: $U $ によって操作された状態 $ \ket{\phi} $ を表すクォンタムレジスタ。 $ \Ket{\phi} $ が $U $ の eigenstate の場合、$U \ket{\phi} = e ^ {i\ phi} \ket{\phi} $ for $ \ phi \ in [0, 2 \ pi) $ 不明なフェーズです。
    isArray: true
    isPrimitive: true
    uid: Qubit
  - name: controlRegister
    summary: 指定された oracle の制御に使用できるビッグエンディアン表現整数レジスタ。このレジスタには、この操作の適用後に $ + phi $ の表現が含まれます。 ControlRegister は初期状態 $ \ket{00\cdots 0} $ で開始することを前提としています。レジスタの長さは、必要な有効桁数を示しています。
    uid: microsoft.quantum.arithmetic.bigendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 1e070d44830a77b007469ba1fad48c107625ddd9
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91478921"
