### YamlMime:QSharpType
uid: microsoft.quantum.arrays.unique
name: Unique
type: function
namespace: microsoft.quantum.arrays
summary: >-
  隣接する要素が等しくない新しい配列を返します。


  要素の配列と関数が等しいかどうかをテストするために、この関数は要素の相対順序を保持する新しい配列を返しますが、等しいすべての隣接する要素は、1つの要素だけにフィルター処理されます。
remarks: 等しいが、互いに隣接していない複数の要素がある場合は、出力配列に複数の要素が出現します。  この関数をと共に使用して `Sorted` 、一意の要素全体を含む配列を取得します。
examples: >-
  ```Q#

  let unique1 = Unique(EqualI, [1, 1, 3, 3, 2, 5, 5, 5, 7]);

  // same as [1, 3, 2, 5, 7]

  let unique2 = Unique(EqualI, [2, 2, 1, 1, 2, 2, 1, 1]);

  // same as [2, 1, 2, 1];

  let unique3 = Unique(EqualI, Sorted(LessThanOrEqualI, [2, 2, 1, 1, 2, 2, 1, 1]));

  // same as [1, 2];

  ```
syntax: "function Unique (equal : (('T, 'T) -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(equal : (('T, 'T) -> Bool), array : 'T[])"
  types:
  - name: equal
    summary: '`a` `b` がである場合にと等しいと見なされる2つの要素を比較する関数 `equal(a, b)` `true` 。'
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: 一意の要素をフィルター処理する対象の配列。
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - summary: 隣接する要素が等しくない配列。
    isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: の各要素の型 `array` 。
metadata:
  ms.openlocfilehash: a47f41ce4298035bd2ccf23dfd26491349f946f7
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91494086"
