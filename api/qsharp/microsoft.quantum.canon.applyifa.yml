### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyifa
name: ApplyIfA
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  クラシックビットで条件付き adjointable 操作を適用します。


  操作 `op` とビット値 `bit`を指定すると、`bit` が `true`の場合、`target` に `op` が適用されます。 `false`した場合、`target`には何も起こりません。

  サフィックス `A` は、適用される操作が adjointable であることを示します。
examples: >-
  次の例では、`Bool` 値の配列として指定された古典的なビット文字列によって表される計算基準の状態に qubits のレジスタを準備します。


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zip(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIfA (op : ('T => Unit is Adj), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit is Adj), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 条件付きで適用する操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
  - name: bit
    summary: op が適用されるかどうかを制御するブール値。
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 操作が適用される入力。
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 条件付きで適用される操作の入力型。
functors:
- Adjoint
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
metadata:
  ms.openlocfilehash: 2c62617251d7795f19fa67f7de01859679c94313
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73213876"
