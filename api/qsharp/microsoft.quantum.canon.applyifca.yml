### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyifca
name: ApplyIfCA
type: operation
namespace: microsoft.quantum.canon
summary: >-
  古典的なビットに対して条件付きのユニタリ操作を適用します。


  操作とビット値を指定した場合は、 `op` `bit` `op` がの場合はに適用され `target` `bit` `true` ます。 `false`の場合、には何も起こりません `target` 。

  サフィックスは、 `CA` 適用される操作が、ユニタリ (制御可能および adjointable) であることを示します。
examples: >-
  次の例では、値の配列として指定された古典的なビット文字列によって表される計算基準の状態に qubits のレジスタを準備し `Bool` ます。


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zipped(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIfCA (op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 条件付きで適用する操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: bit
    summary: op が適用されるかどうかを制御するブール値。
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 操作が適用される入力。
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 条件付きで適用される操作の入力型。
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
metadata:
  ms.openlocfilehash: ac36b00dff1e00f0994150f34323f03ba417609f
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91473260"
