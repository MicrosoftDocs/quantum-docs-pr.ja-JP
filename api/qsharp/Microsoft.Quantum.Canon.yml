### YamlMime:QSharpNamespace
uid: microsoft.quantum.canon
name: Microsoft.Quantum.Canon
functions:
- uid: microsoft.quantum.canon.bigendiantolittleendian
  summary: "\n> [!WARNING]\n> 非推奨\n\nBigEndianToLittleEndian は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.bigendianaslittleendian\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian\" を使用してください。"
- uid: microsoft.quantum.canon.bound
  summary: 1つの入力に対して動作する操作の配列を指定すると、によって、指定された各操作を順番に実行する新しい操作が生成されます。
- uid: microsoft.quantum.canon.bounda
  summary: >-
    1つの入力に対して動作する操作の配列を指定すると、によって、指定された各操作を順番に実行する新しい操作が生成されます。

    修飾子は、 `A` 配列内のすべての操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.boundc
  summary: >-
    1つの入力に対して動作する操作の配列を指定すると、によって、指定された各操作を順番に実行する新しい操作が生成されます。

    修飾子は、 `C` 配列内のすべての操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.boundca
  summary: >-
    1つの入力に対して動作する操作の配列を指定すると、によって、指定された各操作を順番に実行する新しい操作が生成されます。

    修飾子は、 `CA` 配列内のすべての操作が adjointable および制御可能であることを示します。
- uid: microsoft.quantum.canon.ccontrolled
  summary: 操作 op が指定された場合、は、従来の制御ビットが true の場合に op を適用する新しい操作を返します。 `false`の場合、何も起こりません。
- uid: microsoft.quantum.canon.ccontrolleda
  summary: >-
    操作 op が指定された場合、は、従来の制御ビットが true の場合に op を適用する新しい操作を返します。 `false`の場合、何も起こりません。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.ccontrolledc
  summary: >-
    操作 op が指定された場合、は、従来の制御ビットが true の場合に op を適用する新しい操作を返します。 `false`の場合、何も起こりません。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.ccontrolledca
  summary: >-
    操作 op が指定された場合、は、従来の制御ビットが true の場合に op を適用する新しい操作を返します。 `false`の場合、何も起こりません。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.compose
  summary: 2つの関数の合成を返します。
- uid: microsoft.quantum.canon.conjugatedby
  summary: 外部操作と内部操作では、外部操作によって内部操作を活用する新しい操作が返されます。
- uid: microsoft.quantum.canon.conjugatedbya
  summary: 外部操作と内部操作では、外部操作によって内部操作を活用する新しい操作が返されます。
- uid: microsoft.quantum.canon.conjugatedbyc
  summary: 外部操作と内部操作では、外部操作によって内部操作を活用する新しい操作が返されます。
- uid: microsoft.quantum.canon.conjugatedbyca
  summary: 外部操作と内部操作では、外部操作によって内部操作を活用する新しい操作が返されます。
- uid: microsoft.quantum.canon.controlledonbitstring
  summary: 制御レジスタの状態が指定したビットマスクに対応する場合に、ターゲットレジスタに oracle を適用する、ユニタリ操作を返します。
- uid: microsoft.quantum.canon.controlledonint
  summary: 制御レジスタの状態が指定した正の整数に対応する場合に、ターゲットレジスタに oracle を適用する、ユニタリ演算子を返します。
- uid: microsoft.quantum.canon.curriedop
  summary: >-
    2つの入力に対して、カリー化された操作のバージョンを返します。


    つまり、2つの入力を持つ演算が指定された場合、この関数は、isomorphism $f (x, y) \equiv f (x) (y) $ という値を適用して、1つの入力の操作を返す1つの入力の操作を返します。
- uid: microsoft.quantum.canon.decomposedintotimestepsca
  summary: 指定された操作に対して Trotter – Suzuki インテグレーターを実装する操作を返します。
- uid: microsoft.quantum.canon.decomposeintotimestepsca
  summary: "\n> [!WARNING]\n> 非推奨\n\nDecomposeIntoTimeStepsCA は非推奨となりました。 代わりに、@\"microsoft.quantum.canon.decomposedintotimestepsca\" を使用してください。"
- uid: microsoft.quantum.canon.delayed
  summary: 指定された引数を使用して指定された操作を適用する操作を返します。
- uid: microsoft.quantum.canon.delayeda
  summary: 指定された引数を使用して指定された操作を適用する操作を返します。
- uid: microsoft.quantum.canon.delayedc
  summary: 指定された引数を使用して指定された操作を適用する操作を返します。
- uid: microsoft.quantum.canon.delayedca
  summary: 指定された引数を使用して指定された操作を適用する操作を返します。
- uid: microsoft.quantum.canon.embedpauli
  summary: Single qubit の P# li 演算子と qubit のインデックスが指定されている場合、そのインデックスの指定された単一の qubit 演算子と `PauliI` 他のすべてのインデックスで、マルチ qubit の P# li 演算子を返します。
- uid: microsoft.quantum.canon.fst
  summary: ペアが指定されている場合、最初の要素を返します。
- uid: microsoft.quantum.canon.ignore
  summary: 演算または関数の出力を無視します。
- uid: microsoft.quantum.canon.isresultone
  summary: 指定された結果値がと等しいかどうかをテスト `One` します。
- uid: microsoft.quantum.canon.isresultzero
  summary: 指定された結果値がと等しいかどうかをテスト `Zero` します。
- uid: microsoft.quantum.canon.littleendiantobigendian
  summary: "\n> [!WARNING]\n> 非推奨\n\nLittleEndianToBigEndian は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.littleendianasbigendian\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian\" を使用してください。"
- uid: microsoft.quantum.canon.multiplexerbruteforcefromgenerator
  summary: >-
    N-qubit number 状態 $ \ket{j} $ によって制御されている場合に _j $ の $V を適用する、乗算によって制御される、$ $U の数値演算を返します。


    $U = \ sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexerfromgenerator
  summary: >-
    N-qubit number 状態 $ \ket{j} $ によって制御されている場合に _j $ の $V を適用する、乗算によって制御される、$ $U の数値演算を返します。


    $U = \ sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.operationpow
  summary: >-
    操作を累乗します。


    つまり、ゲート $U $ を表す操作が指定されている場合は、power $m $ に対して ^ m $ $U 新しい操作を返します。
- uid: microsoft.quantum.canon.operationpowa
  summary: >-
    操作を累乗します。

    修飾子は、 `A` 操作が adjointable であることを示します。


    つまり、ゲート $U $ を表す操作が指定されている場合は、power $m $ に対して ^ m $ $U 新しい操作を返します。
- uid: microsoft.quantum.canon.operationpowc
  summary: >-
    操作を累乗します。

    修飾子は、 `C` 操作が制御可能であることを示します。


    つまり、ゲート $U $ を表す操作が指定されている場合は、power $m $ に対して ^ m $ $U 新しい操作を返します。
- uid: microsoft.quantum.canon.operationpowca
  summary: >-
    操作を累乗します。

    修飾子は、 `A` 操作が制御可能であり、adjointable であることを示します。


    つまり、ゲート $U $ を表す操作が指定されている場合は、power $m $ に対して ^ m $ $U 新しい操作を返します。
- uid: microsoft.quantum.canon.restrictedtosubregister
  summary: 操作をレジスタのインデックスの配列 (サブレジスタ) に制限します。
- uid: microsoft.quantum.canon.restrictedtosubregistera
  summary: >-
    操作をレジスタのインデックスの配列 (サブレジスタ) に制限します。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.restrictedtosubregisterc
  summary: >-
    操作をレジスタのインデックスの配列 (サブレジスタ) に制限します。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.restrictedtosubregisterca
  summary: >-
    操作をレジスタのインデックスの配列 (サブレジスタ) に制限します。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.snd
  summary: ペアが指定されると、はその2番目の要素を返します。
- uid: microsoft.quantum.canon.stackcapacity
  summary: "\n> [!WARNING]\n> 非推奨\n\nStackCapacity は非推奨となりました。"
- uid: microsoft.quantum.canon.stacklength
  summary: "\n> [!WARNING]\n> 非推奨\n\nStackLength の使用は推奨されていません。"
- uid: microsoft.quantum.canon.stacknew
  summary: "\n> [!WARNING]\n> 非推奨\n\nStackNew は非推奨となりました。"
- uid: microsoft.quantum.canon.stackpeek
  summary: "\n> [!WARNING]\n> 非推奨\n\nStackPeek は非推奨となりました。"
- uid: microsoft.quantum.canon.stackpop
  summary: "\n> [!WARNING]\n> 非推奨\n\nStackPop の使用は非推奨とされました。"
- uid: microsoft.quantum.canon.stackpush
  summary: "\n> [!WARNING]\n> 非推奨\n\nStackPush の使用は非推奨とされました。"
- uid: microsoft.quantum.canon.transformedoperation
  summary: 関数と操作が指定された場合、指定された関数によって入力が変換される新しい操作を返します。
- uid: microsoft.quantum.canon.transformedoperationa
  summary: 関数と操作が指定された場合、指定された関数によって入力が変換される新しい操作を返します。
- uid: microsoft.quantum.canon.transformedoperationc
  summary: 関数と操作が指定された場合、指定された関数によって入力が変換される新しい操作を返します。
- uid: microsoft.quantum.canon.transformedoperationca
  summary: 関数と操作が指定された場合、指定された関数によって入力が変換される新しい操作を返します。
- uid: microsoft.quantum.canon.uncurriedop
  summary: 操作を返す関数を指定した場合、は、両方の入力をタプルとして受け取る新しい操作を返します。
- uid: microsoft.quantum.canon.uncurriedopa
  summary: >-
    操作を返す関数を指定した場合、は、両方の入力をタプルとして受け取る新しい操作を返します。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.uncurriedopc
  summary: >-
    操作を返す関数を指定した場合、は、両方の入力をタプルとして受け取る新しい操作を返します。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.uncurriedopca
  summary: >-
    操作を返す関数を指定した場合、は、両方の入力をタプルとして受け取る新しい操作を返します。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.weightonepaulis
  summary: 指定された数の qubits に対するすべての重み-1 の Pan Li 演算子の配列を返します。
- uid: microsoft.quantum.canon.xor
  summary: "\n> [!WARNING]\n> 非推奨\n\nXOR は非推奨とされました。 代わりに、@\"microsoft.quantum.logical.xor\" を使用してください。\n@\"microsoft.quantum.logical.xor\" を使用してください。"
operations:
- uid: microsoft.quantum.canon.andladder
  summary: ターゲット qubits のレジスタで、制御された "AND はしご" を実行します。
- uid: microsoft.quantum.canon.applyand
  summary: 測定を使用して adjoint 演算を実行し、両方のコントロール qubit が1の状態である場合にのみ、指定されたターゲット qubit を反転します。
- uid: microsoft.quantum.canon.applyccnotchain
  summary: >-
    2つの qubit レジスタの対応するビットで制御される CCNOT ゲートのカスケードを実装します。これは、いずれかのレジスタの次の qubit で動作します。

    両方のレジスタでコントロールとして位置0にある qubits から、CCNOT はターゲットレジスタの位置1にある qubits に適用され、ターゲットレジスタの位置2の qubits に作用する位置1の qubits によって制御されます。その後、ターゲットの qubits に対するアクションで終了 `Length(nQubits)-1` します。
- uid: microsoft.quantum.canon.applycnotchain
  summary: Qubits のレジスタのパリティを計算します。
- uid: microsoft.quantum.canon.applycnotchainwithtarget
  summary: Qubits の配列のパリティをターゲットの qubits に計算します。
- uid: microsoft.quantum.canon.applycontrolledonbitstring
  summary: ターゲットレジスタに対して、指定されたビットマスクによって指定された状態で制御される、一連の処理を実行します。
- uid: microsoft.quantum.canon.applycontrolledonint
  summary: コントロールの登録状態が指定した正の整数に対応する場合は、ターゲットレジスタに対して、値の指定操作を適用します。
- uid: microsoft.quantum.canon.applydiagonalunitary
  summary: 複雑なフェーズの配列を、qubits のレジスタの数値ベースの状態に適用します。
- uid: microsoft.quantum.canon.applyfermionicswap
  summary: Fermionic SWAP を適用します。
- uid: microsoft.quantum.canon.applyif
  summary: 従来のビットで条件付き操作を適用します。
- uid: microsoft.quantum.canon.applyifa
  summary: クラシックビットで条件付き adjointable 操作を適用します。
- uid: microsoft.quantum.canon.applyifc
  summary: クラシックビットで条件付きの制御可能な操作を適用します。
- uid: microsoft.quantum.canon.applyifca
  summary: 古典的なビットに対して条件付きのユニタリ操作を適用します。
- uid: microsoft.quantum.canon.applyifelseb
  summary: 従来のビットの値に応じて、2つの操作のいずれかを適用します。
- uid: microsoft.quantum.canon.applyifelseba
  summary: 従来のビットの値に応じて、2つの adjointable 操作のいずれかを適用します。
- uid: microsoft.quantum.canon.applyifelsebc
  summary: クラシックビットの値に応じて、制御可能な2つの操作のいずれか1つを適用します。
- uid: microsoft.quantum.canon.applyifelsebca
  summary: 従来のビットの値に応じて、2つのいずれかのユニタリ操作を適用します。
- uid: microsoft.quantum.canon.applyifelser
  summary: 古典的な結果の値に応じて、2つの操作のいずれかを適用します。
- uid: microsoft.quantum.canon.applyifelsera
  summary: 従来の結果の値に応じて、2つの adjointable 操作のいずれかを適用します。
- uid: microsoft.quantum.canon.applyifelserc
  summary: クラシック結果の値に応じて、制御可能な2つの操作のいずれかを適用します。
- uid: microsoft.quantum.canon.applyifelserca
  summary: 古典的な結果の値に応じて、2つのいずれかのユニタリ操作を適用します。
- uid: microsoft.quantum.canon.applyifone
  summary: 従来の結果値に対する条件付き操作を1として適用します。
- uid: microsoft.quantum.canon.applyifonea
  summary: 従来の結果値が1である adjointable 操作を適用します。
- uid: microsoft.quantum.canon.applyifonec
  summary: 古典的な結果値が1であるという制御可能な操作を適用します。
- uid: microsoft.quantum.canon.applyifoneca
  summary: 古典的な結果値が1であることを条件とする、一連の検索操作を適用します。
- uid: microsoft.quantum.canon.applyifzero
  summary: 従来の結果値に対する条件付き操作を0に適用します。
- uid: microsoft.quantum.canon.applyifzeroa
  summary: 従来の結果値が0である adjointable 操作を適用します。
- uid: microsoft.quantum.canon.applyifzeroc
  summary: 古典的な結果値が0である制御可能な操作を適用します。
- uid: microsoft.quantum.canon.applyifzeroca
  summary: 古典的な結果値に対して条件付きの、ゼロを指定した、ユニタリ操作を適用します。
- uid: microsoft.quantum.canon.applylowdepthand
  summary: 指定されたターゲットの qubit が、両方のコントロール qubit が1状態 (T 深度 1) である場合にのみ、測定を使用して adjoint 操作を実行します。
- uid: microsoft.quantum.canon.applymulticontrolledc
  summary: >-
    1つの操作の制御された複数のバージョンを適用します。

    修飾子は、 `C` single qubit 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applymulticontrolledca
  summary: >-
    1つの操作の制御された複数のバージョンを適用します。

    修飾子は、 `CA` single qubit 操作が制御可能で adjointable であることを示します。
- uid: microsoft.quantum.canon.applyoprepeatedlyover
  summary: Qubit レジスタに対して同じ操作を複数回適用します。
- uid: microsoft.quantum.canon.applyoprepeatedlyovera
  summary: Qubit レジスタに対して同じ操作を複数回適用します。
- uid: microsoft.quantum.canon.applyoprepeatedlyoverc
  summary: Qubit レジスタに対して同じ操作を複数回適用します。
- uid: microsoft.quantum.canon.applyoprepeatedlyoverca
  summary: Qubit レジスタに対して同じ操作を複数回適用します。
- uid: microsoft.quantum.canon.applypauli
  summary: 指定された複数の演算子がある場合、対応する操作をレジスタに適用します。
- uid: microsoft.quantum.canon.applypaulifrombitstring
  summary: ブール値配列の対応するビットが指定された入力と一致する場合、配列内の各 qubit に対して P# li 演算子を適用します。
- uid: microsoft.quantum.canon.applyquantumfouriertransform
  summary: リトルエンディアン表現内の整数を含むクォンタムレジスタに対して、Quantum フーリエ変換を実行します。
- uid: microsoft.quantum.canon.applyreversedopbigendiana
  summary: "\n> [!WARNING]\n> 非推奨\n\nApplyReversedOpBigEndianA は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.applyreversedopbea\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA\" を使用してください。"
- uid: microsoft.quantum.canon.applyreversedopbigendianc
  summary: "\n> [!WARNING]\n> 非推奨\n\nApplyReversedOpBigEndianC は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.applyreversedopbec\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC\" を使用してください。"
- uid: microsoft.quantum.canon.applyreversedopbigendianca
  summary: "\n> [!WARNING]\n> 非推奨\n\nApplyReversedOpBigEndianCA は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.applyreversedopbeca\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC\" を使用してください。"
- uid: microsoft.quantum.canon.applyreversedoplittleendiana
  summary: "\n> [!WARNING]\n> 非推奨\n\nApplyReversedOpLittleEndianA は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.applyreversedoplea\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA\" を使用してください。"
- uid: microsoft.quantum.canon.applyreversedoplittleendianc
  summary: "\n> [!WARNING]\n> 非推奨\n\nApplyReversedOpLittleEndianC は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.applyreversedoplec\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC\" を使用してください。"
- uid: microsoft.quantum.canon.applyreversedoplittleendianca
  summary: "\n> [!WARNING]\n> 非推奨\n\nApplyReversedOpLittleEndianCA は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.applyreversedopleca\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC\" を使用してください。"
- uid: microsoft.quantum.canon.applyripplecarrycomparatorle
  summary: "\n> [!WARNING]\n> 非推奨\n\nApplyRippleCarryComparatorLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.compareusingripplecarry\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry\" を使用してください。"
- uid: microsoft.quantum.canon.applyseriesofops
  summary: Ops とそのターゲットの一覧を配列に順番に適用します。
- uid: microsoft.quantum.canon.applyseriesofopsa
  summary: Ops とそのターゲットの一覧を配列に順番に適用します。 (Adjoint)
- uid: microsoft.quantum.canon.applyseriesofopsc
  summary: Ops とそのターゲットの一覧を配列に順番に適用します。 た
- uid: microsoft.quantum.canon.applyseriesofopsca
  summary: Ops とそのターゲットの一覧を配列に順番に適用します。 (Adjoint + 制御)
- uid: microsoft.quantum.canon.applytoeach
  summary: レジスタ内の各要素に単一の qubit 演算を適用します。
- uid: microsoft.quantum.canon.applytoeacha
  summary: >-
    レジスタ内の各要素に単一の qubit 演算を適用します。

    修飾子は、 `A` single qubit 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.applytoeachc
  summary: >-
    レジスタ内の各要素に単一の qubit 演算を適用します。

    修飾子は、 `C` single qubit 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applytoeachca
  summary: >-
    レジスタ内の各要素に単一の qubit 演算を適用します。

    修飾子は、 `CA` single qubit 操作が制御可能で adjointable であることを示します。
- uid: microsoft.quantum.canon.applytoeachindex
  summary: レジスタ内のインデックスが付けられた各要素に単一の qubit 演算を適用します。
- uid: microsoft.quantum.canon.applytoeachindexa
  summary: >-
    レジスタ内のインデックスが付けられた各要素に単一の qubit 演算を適用します。

    修飾子は、 `A` single qubit 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.applytoeachindexc
  summary: >-
    レジスタ内のインデックスが付けられた各要素に単一の qubit 演算を適用します。

    修飾子は、 `C` single qubit 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applytoeachindexca
  summary: >-
    レジスタ内のインデックスが付けられた各要素に単一の qubit 演算を適用します。

    修飾子は、 `CA` single qubit 操作が adjointable で制御可能であることを示します。
- uid: microsoft.quantum.canon.applytoelement
  summary: 配列の特定の要素に操作を適用します。
- uid: microsoft.quantum.canon.applytoelementa
  summary: 配列の特定の要素に操作を適用します。
- uid: microsoft.quantum.canon.applytoelementc
  summary: 配列の特定の要素に操作を適用します。
- uid: microsoft.quantum.canon.applytoelementca
  summary: 配列の特定の要素に操作を適用します。
- uid: microsoft.quantum.canon.applytofirstqubit
  summary: レジスタ内の最初の qubit に操作を適用します。
- uid: microsoft.quantum.canon.applytofirstqubita
  summary: >-
    レジスタ内の最初の qubit に操作を適用します。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.applytofirstqubitc
  summary: >-
    レジスタ内の最初の qubit に操作 op を適用します。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applytofirstqubitca
  summary: >-
    レジスタ内の最初の qubit に操作 op を適用します。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.applytofirstthreequbits
  summary: レジスタ内の最初の3つの qubits に操作を適用します。
- uid: microsoft.quantum.canon.applytofirstthreequbitsa
  summary: >-
    レジスタ内の最初の3つの qubits に操作を適用します。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.applytofirstthreequbitsc
  summary: >-
    レジスタ内の最初の3つの qubits に操作を適用します。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applytofirstthreequbitsca
  summary: >-
    レジスタ内の最初の3つの qubits に操作を適用します。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.applytofirsttwoqubits
  summary: レジスタ内の最初の2つの qubits に操作を適用します。
- uid: microsoft.quantum.canon.applytofirsttwoqubitsa
  summary: >-
    レジスタ内の最初の2つの qubits に操作を適用します。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.applytofirsttwoqubitsc
  summary: >-
    レジスタ内の最初の2つの qubits に操作を適用します。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applytofirsttwoqubitsca
  summary: >-
    レジスタ内の最初の2つの qubits に操作を適用します。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.applytopartition
  summary: レジスタの特定のパーティションに2つの操作を適用して、2つの部分に分割します。
- uid: microsoft.quantum.canon.applytopartitiona
  summary: >-
    レジスタの特定のパーティションに2つの操作を適用して、2つの部分に分割します。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.applytopartitionc
  summary: >-
    レジスタの特定のパーティションに2つの操作を適用して、2つの部分に分割します。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applytopartitionca
  summary: >-
    レジスタの特定のパーティションに2つの操作を適用して、2つの部分に分割します。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.applytosubregister
  summary: インデックスの配列によって指定された qubits を使用して、レジスタのサブレジスタに操作を適用します。
- uid: microsoft.quantum.canon.applytosubregistera
  summary: >-
    インデックスの配列によって指定された qubits を使用して、レジスタのサブレジスタに操作を適用します。

    修飾子は、 `A` 操作が adjointable であることを示します。
- uid: microsoft.quantum.canon.applytosubregisterc
  summary: >-
    インデックスの配列によって指定された qubits を使用して、レジスタのサブレジスタに操作を適用します。

    修飾子は、 `C` 操作が制御可能であることを示します。
- uid: microsoft.quantum.canon.applytosubregisterca
  summary: >-
    インデックスの配列によって指定された qubits を使用して、レジスタのサブレジスタに操作を適用します。

    修飾子は、 `CA` 操作が制御可能であり、adjointable であることを示します。
- uid: microsoft.quantum.canon.applywith
  summary: 2つの操作を指定した場合、1つは conjugated として適用されます。
- uid: microsoft.quantum.canon.applywitha
  summary: 2つの操作を指定した場合、1つは conjugated として適用されます。
- uid: microsoft.quantum.canon.applywithc
  summary: 2つの操作を指定した場合、1つは conjugated として適用されます。
- uid: microsoft.quantum.canon.applywithca
  summary: 2つの操作を指定した場合、1つは conjugated として適用されます。
- uid: microsoft.quantum.canon.applywithinputtransformation
  summary: 入力を受け入れる操作、その操作と互換性のある出力を返す関数、およびその関数への入力を指定すると、関数を使用して操作が適用され、操作によって予期される形式に入力が変換されます。
- uid: microsoft.quantum.canon.applywithinputtransformationa
  summary: 入力を受け入れる操作、その操作と互換性のある出力を返す関数、およびその関数への入力を指定すると、関数を使用して操作が適用され、操作によって予期される形式に入力が変換されます。
- uid: microsoft.quantum.canon.applywithinputtransformationc
  summary: 入力を受け入れる操作、その操作と互換性のある出力を返す関数、およびその関数への入力を指定すると、関数を使用して操作が適用され、操作によって予期される形式に入力が変換されます。
- uid: microsoft.quantum.canon.applywithinputtransformationca
  summary: 入力を受け入れる操作、その操作と互換性のある出力を返す関数、およびその関数への入力を指定すると、関数を使用して操作が適用され、操作によって予期される形式に入力が変換されます。
- uid: microsoft.quantum.canon.approximatelyapplydiagonalunitary
  summary: 複雑なフェーズの配列を、qubits のレジスタの数値ベースの状態に適用し、指定された許容範囲に従って小さな回転角度を切り捨てます。
- uid: microsoft.quantum.canon.approximatelymultiplexpauli
  summary: Qubits の配列で条件付きの回転を適用し、指定された許容範囲に従って小さな回転角度を切り捨てます。
- uid: microsoft.quantum.canon.approximatelymultiplexz
  summary: Qubits の配列に条件付きで条件付きの回転を適用し、指定された許容範囲に従って小さな回転角度を切り捨てます。
- uid: microsoft.quantum.canon.approximateqft
  summary: クォンタムレジスタにおおよそのクォンタムフーリエ変換 (アク FT) を適用します。
- uid: microsoft.quantum.canon.asserthighestbit
  summary: "\n> [!WARNING]\n> 非推奨\n\nAssertHighestBit は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.assertmostsignificantbit\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit\" を使用してください。"
- uid: microsoft.quantum.canon.assertlessthanphasele
  summary: "\n> [!WARNING]\n> 非推奨\n\nAssertLessThanPhaseLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.assertphaselessthan\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan\" を使用してください。"
- uid: microsoft.quantum.canon.assertphase
  summary: >-
    等しい法則状態のフェーズに予期される値があることをアサートします。


    具体的には、任意の real t に対して $ \frac{e ^ {i t}} {\ sqrt {2} } (e ^ {k} \ k) $ として表現されるクォンタムの状態のフェーズ $ \ phi $ が、予期される値を持つことをアサートし {0} {1} ます。
- uid: microsoft.quantum.canon.cascadeccnot
  summary: "\n> [!WARNING]\n> 非推奨\n\nCascadeCCNOT は非推奨となりました。 代わりに、@\"microsoft.quantum.canon.applyccnotchain\" を使用してください。"
- uid: microsoft.quantum.canon.cascadecnot
  summary: "\n> [!WARNING]\n> 非推奨\n\nCascadeCNOT は非推奨となりました。 代わりに、@\"microsoft.quantum.canon.applycnotchain\" を使用してください。\n@\"microsoft.quantum.canon.applycnotchain\" を使用してください。"
- uid: microsoft.quantum.canon.cnotchain
  summary: "\n> [!WARNING]\n> 非推奨\n\nCNOTChain は非推奨となりました。 代わりに、@\"microsoft.quantum.canon.applycnotchain\" を使用してください。"
- uid: microsoft.quantum.canon.cnotchaintarget
  summary: "\n> [!WARNING]\n> 非推奨\n\nCNOTChainTarget は非推奨となりました。 代わりに、@\"microsoft.quantum.canon.applycnotchainwithtarget\" を使用してください。"
- uid: microsoft.quantum.canon.cx
  summary: >-
    制御された X (CX) ゲートを qubits のペアに適用します。


    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 \\ \\ 0 & 0 & 0 & 1 \\ \\ 0 & 0 & 1 & 0 \end{align}、$ $。ここでは、行と列がクォンタムの概念ガイドに従って編成されています。
- uid: microsoft.quantum.canon.cy
  summary: >-
    コントロール-Y (CY) ゲートを qubits のペアに適用します。


    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 0 & 0 & 0 & \\ \\ -i 0 & 0 \\ \\ & i & 0 \end{align}、$ $。ここでは、行と列がクォンタムの概念ガイドに従って編成されています。
- uid: microsoft.quantum.canon.cz
  summary: >-
    CS-CZ ゲートを qubits のペアに適用します。


    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 0 \\ \\ & 0 & 1 & 0 0 & \\ \\ 0 & 0 &-1 \end{align}、$ $。ここでは、行と列がクォンタムの概念ガイドに従って編成されています。
- uid: microsoft.quantum.canon.delay
  summary: 指定された操作を遅延付きで適用します。
- uid: microsoft.quantum.canon.delaya
  summary: 指定された操作を遅延付きで適用します。
- uid: microsoft.quantum.canon.delayc
  summary: 指定された操作を遅延付きで適用します。
- uid: microsoft.quantum.canon.delayca
  summary: 指定された操作を遅延付きで適用します。
- uid: microsoft.quantum.canon.hy
  summary: >-
    Y ベースのアナログを、Z 軸と Y 軸をインターチェンジする Hadamard 変換に適用します。


    1つの qubit で Y Hadamard 変換 $H _Y = S H $ は次のようになります。


    \begin{align} H_Y \mathrel{: =} \ frac {1} {\ sqrt {2} } \begin{bmatrix} 1 & 1 \\ \\ i &-i \end{bmatrix}.

    \end{align}
- uid: microsoft.quantum.canon.inplacemajority
  summary: "\n> [!WARNING]\n> 非推奨\n\nInPlaceMajority は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.applymajorityinplace\" を使用してください。\n@\"microsoft.quantum.arithmetic.applymajorityinplace\" を使用してください。"
- uid: microsoft.quantum.canon.inplacexorbe
  summary: "\n> [!WARNING]\n> 非推奨\n\nInPlaceXorBE は非推奨となりました。 代わりに、@ \"applyreversedopleca (applyxorinplace (value, _), target)\" を使用してください。\nこの操作は削除されました。"
- uid: microsoft.quantum.canon.inplacexorle
  summary: "\n> [!WARNING]\n> 非推奨\n\nInPlaceXorLE は非推奨となりました。 代わりに、@\"microsoft.quantum.measurement.applyxorinplace\" を使用してください。\n@\"Microsoft.Quantum.Measurement.ApplyXorInPlace\" を使用してください。"
- uid: microsoft.quantum.canon.integerincrementle
  summary: "\n> [!WARNING]\n> 非推奨\n\nIntegerIncrementLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.incrementbyinteger\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.IncrementByInteger\" を使用してください。"
- uid: microsoft.quantum.canon.integerincrementphasele
  summary: "\n> [!WARNING]\n> 非推奨\n\nIntegerIncrementPhaseLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.incrementphasebyinteger\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger\" を使用してください。"
- uid: microsoft.quantum.canon.iteratethroughcartesianpower
  summary: 整数範囲のデカルト乗の各インデックスに演算を適用します。
- uid: microsoft.quantum.canon.iteratethroughcartesianproduct
  summary: 複数の範囲のデカルト積の各インデックスに対して操作を適用します。
- uid: microsoft.quantum.canon.modularaddproductle
  summary: "\n> [!WARNING]\n> 非推奨\n\nModularAddProductLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.multiplyandaddbymodularinteger\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger\" を使用してください。"
- uid: microsoft.quantum.canon.modularaddproductphasele
  summary: "\n> [!WARNING]\n> 非推奨\n\nModularAddProductPhaseLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger\" を使用してください。"
- uid: microsoft.quantum.canon.modularincrementle
  summary: "\n> [!WARNING]\n> 非推奨\n\nModularIncrementLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.modularincrementbyinteger\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger\" を使用してください。"
- uid: microsoft.quantum.canon.modularincrementphasele
  summary: "\n> [!WARNING]\n> 非推奨\n\nModularIncrementPhaseLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.incrementphasebymodularinteger\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger\" を使用してください。"
- uid: microsoft.quantum.canon.modularmultiplybyconstantle
  summary: "\n> [!WARNING]\n> 非推奨\n\nModularMultiplyByConstantLE は非推奨となりました。 代わりに、@\"microsoft.quantum.arithmetic.multiplybymodularinteger\" を使用してください。\n@\"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger\" を使用してください。"
- uid: microsoft.quantum.canon.multiplexoperations
  summary: >-
    数値の状態の配列によって制御される操作の配列を適用します。


    つまり、$n $-qubit 数値の状態 $ \ket{j} $ によって制御されている場合は、_j $ の $V によって $ に適用される、多重制御された $U $ に適用されます。


    $U = \ sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexoperationsbruteforcefromgenerator
  summary: >-
    N-qubit number 状態 $ \ket{j} $ によって制御されている場合に、_j $ $V を適用する $U $ に、乗算によって制御される数値演算を適用します。


    $U = \ sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexoperationsfromgenerator
  summary: >-
    N-qubit number 状態 $ \ket{j} $ によって制御されている場合に、_j $ の $V を適用する $U $ に、乗算によって制御される数値演算を適用します。


    $U = \ sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
- uid: microsoft.quantum.canon.multiplexpauli
  summary: Qubits の配列に条件付きの回転を適用します。
- uid: microsoft.quantum.canon.multiplexz
  summary: Qubits の配列で条件付きの Pan Li Z の回転条件を適用します。
- uid: microsoft.quantum.canon.noop
  summary: 引数に対して identity 操作 (no op) を実行します。
- uid: microsoft.quantum.canon.permutequbits
  summary: スワップ操作を使用した Permutes qubits。
- uid: microsoft.quantum.canon.qft
  summary: ビッグエンディアン表現に整数を含むクォンタムレジスタに対して、Quantum フーリエ変換を実行します。
- uid: microsoft.quantum.canon.qftle
  summary: リトルエンディアン表現内の整数を含むクォンタムレジスタに対して、Quantum フーリエ変換を実行します。
- uid: microsoft.quantum.canon.rall0
  summary: >-
    フェーズシフト操作を実行します。


    $R = \ bold one-(1-e ^ {i \phi}) \ket{0\cdots 0} \bra{0\cdots 0} $。
- uid: microsoft.quantum.canon.rall1
  summary: >-
    フェーズシフト操作を実行します。


    $R = \ bold one-(1-e ^ {i \phi}) \ket{1\cdots 1} \bra{1\cdots 1} $。
- uid: microsoft.quantum.canon.repeat
  summary: 指定された回数だけ操作を繰り返します。
- uid: microsoft.quantum.canon.repeata
  summary: 指定された回数だけ操作を繰り返します。
- uid: microsoft.quantum.canon.repeatc
  summary: 指定された回数だけ操作を繰り返します。
- uid: microsoft.quantum.canon.repeatca
  summary: 指定された回数だけ操作を繰り返します。
- uid: microsoft.quantum.canon.swapreverseregister
  summary: スワップゲートを使用して、レジスタ内の qubits の順序を逆にします。
newtypes:
- uid: microsoft.quantum.canon.ccnotop
  summary: CCNOT gate の署名の種類。
- uid: microsoft.quantum.canon.resultstack
  summary: "\n> [!WARNING]\n> 非推奨\n\nResultStack は非推奨とされました。"
metadata:
  ms.openlocfilehash: ab6e8a58dd163e4a9b2ea299e544a4e487d61e23
  ms.sourcegitcommit: a3775921db1dc5c653c97b8fa8fe2c0ddd5261ff
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 07/02/2020
  ms.locfileid: "85884682"
