### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.incrementphasebyinteger
name: IncrementPhaseByInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  フェーズ回転を使用して、古典的な整数によって署名されていないクォンタムレジスタをインクリメントします。


  は、 `target`リトルエンディアンエンコーディングで $ $x $ の符号なし整数をエンコードし、$a $ と等しいとします。 `increment`

  次に、この操作では、ユニタリ $ \ket{x} \ map\ket{x + a} $ を実装します。この場合、加算は $ 2 ^ n $ という剰余が実行されます。ここで、$n = \texttt{Length (target!)}$.
remarks: >-
  回線は単純化されています。これは、増分が、クォンタムレジスタではなく、古典的な定数であるためです。


  サーキットの図と説明については、 [arXiv のページ6の図である quant-ph/0008033v1](https://arxiv.org/pdf/quant-ph/0008033.pdf#page=6)を参照してください。
syntax: 'operation IncrementPhaseByInteger (increment : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian) : Unit'
references: '- [*Draper*, arxiv: quant-ph/0008033](https://arxiv.org/pdf/quant-ph/0008033v1.pdf)'
input:
  content: '(increment : Int, target : Microsoft.Quantum.Arithmetic.PhaseLittleEndian)'
  types:
  - name: increment
    summary: の`target`インクリメントに使用する整数。
    isPrimitive: true
    uid: Int
  - name: target
    summary: デュアルエンディアンエンコーディング (QFT) を使用して、符号なし整数をエンコードするクォンタムレジスタ。
    uid: microsoft.quantum.arithmetic.phaselittleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- incrementbyintegerbe
- incrementbyintegerle
metadata:
  ms.openlocfilehash: 2893d432b4043bbacb425f3ae42cbbdd3d4dc225
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82679514"
