### YamlMime:QSharpType
uid: microsoft.quantum.arrays.filtered
name: Filtered
type: function
namespace: Microsoft.Quantum.Arrays
summary: 配列と、配列の要素に対して定義された述語が指定されている場合、は述語を満たす要素で構成される配列を返します。
remarks: 関数は、ジェネリック型に対して定義されます。つまり、配列`'T[]`と述語`'T -> Bool`がある場合は、要素をフィルター処理できます。
examples: >-
  次のコードは、"Filtered" 関数を示しています。

  述語は、 @"microsoft.quantum.logical.greaterthani"関数を使用して定義されます。


  ```qsharp

  open Microsoft.Quantum.Arrays;

  open Microsoft.Quantum.Logical;


  function FilteredDemo() : Unit {
     let predicate = GreaterThanI(_, 5);
     let filteredArray = Filtered(predicate, [2, 5, 9, 1, 8]);
     Message($"{filteredArray}");
  }

  ```


  この例で期待される結果は、5より大きい数値の配列になります。
syntax: "function Filtered (predicate : ('T -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(predicate : ('T -> Bool), array : 'T[])"
  types:
  - name: predicate
    summary: 要素をフィルター `'T`処理するために使用されるブール値からブール型への関数。
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: 上`'T`の要素の配列。
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - summary: 述語を`'T[]`満たす要素の配列。
    isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: 要素の`array`型。
metadata:
  ms.openlocfilehash: 6aa19a279425672675182f3c8098e7c47fb5cce6
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676463"
