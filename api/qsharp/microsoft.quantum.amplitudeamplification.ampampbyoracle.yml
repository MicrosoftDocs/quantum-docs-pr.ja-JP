### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.ampampbyoracle
name: AmpAmpByOracle
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 標準の振幅増幅アルゴリズム
remarks: これは、\begin{align} A\ket{0}\_{f} \ket{0}\_s = \lambda\ket{1}\_f\ket {\ text {target} であると仮定して `AmpAmpPhasesStandard` によって計算された、標準の振幅増幅アルゴリズムです。}\_s + \sqrt{1-| \ ラムダ | ^ 2} \ket{0}\_fcドット, \end{align} この操作では、状態 \begin{align} \operatorname{AmpAmpByOracle}\ket{0}\_{f} \ket{0}\_s = \ sin ((2n + 1) \ sin ^{-1}(\ラムダ)) \ket{1}\_f\ket {\ text {target}}\_s + \cdots\ket{0}\_f \end{align} ほとんどの場合、`flagQubit` と `ancillaRegister` は、$ \ket{0}\_f\ket{0}の状態で初期化され \_a $.
syntax: 'function AmpAmpByOracle (nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
references: '- [*Hoyer、m.、M、Mosca、A. Tapp。*](https://arxiv.org/abs/quant-ph/0005055)'
input:
  content: '(nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: nIterations
    summary: 振幅増幅数 $n の反復回数
    isPrimitive: true
    uid: Int
  - name: stateOracle
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: フラグ qubit へのインデックス
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 標準の振幅増幅クォンタムアルゴリズムを実装する操作
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
ms.openlocfilehash: b55aed7c3a9381827e79c66a4a255b1515982d8d
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 10/31/2019
ms.locfileid: "73215797"
