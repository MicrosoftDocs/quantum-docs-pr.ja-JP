### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.applyxorinplace
name: ApplyXorInPlace
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  古典的な整数と、qubits のレジスタによって表される整数の間のビットごとの XOR 演算を適用します。


  整数内の1ビットに基づいて、リトルエンディアンレジスタの qubits に `X` 操作を適用します。


  によって `value` を示し、y が `target`でエンコードされた符号なし整数であることを示し、`InPlaceXorLE` は $ \ket{y}\rightarrow \ket{y\oplus a} $ というマップによって指定された操作を実行します。 $ \ oplus $ はビットごとの排他的 OR 演算子です。
syntax: 'operation ApplyXorInPlace (value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: value
    summary: 負でないと見なされる整数。
    isPrimitive: true
    uid: Int
  - name: target
    summary: リトルエンディアンエンコーディングで `value` を格納するために使用されるクォンタムレジスタ。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 9d3d837d92537cc5d51a80e8e1c83c230b7acc28
  ms.sourcegitcommit: ca5015fed409eaf0395a89c2e4bc6a890c360aa2
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/29/2020
  ms.locfileid: "76871177"
