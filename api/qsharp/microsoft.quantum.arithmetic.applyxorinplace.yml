### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.applyxorinplace
name: ApplyXorInPlace
type: operation
namespace: microsoft.quantum.arithmetic
summary: >-
  古典的な整数と、qubits のレジスタによって表される整数の間のビットごとの XOR 演算を適用します。


  `X`整数内の1ビットに基づいて、リトルエンディアンレジスタの qubits に操作を適用します。


  `value`A と y は、でエンコードされた符号なし整数であることを示し `target` 、$ `InPlaceXorLE` \ket{y}\rightarrow \ket{y\oplus a} $ というマップによって指定された操作を実行します。 $-oplus $ はビットごとの排他的 or 演算子です。
syntax: 'operation ApplyXorInPlace (value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(value : Int, target : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: value
    summary: 負でないと見なされる整数。
    isPrimitive: true
    uid: Int
  - name: target
    summary: '`value`リトルエンディアンエンコーディングで格納するために使用されるクォンタムレジスタ。'
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 7b4e125f76051b966ec65ca43c7edb1efd270ded
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89342535"
