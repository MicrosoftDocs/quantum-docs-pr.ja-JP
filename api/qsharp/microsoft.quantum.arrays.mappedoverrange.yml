### YamlMime:QSharpType
uid: microsoft.quantum.arrays.mappedoverrange
name: MappedOverRange
type: function
namespace: microsoft.quantum.arrays
summary: 入力として整数を受け取る範囲と関数を指定した場合は、関数の下の範囲値のイメージで構成される新しい配列を返します。
remarks: "関数は、ジェネリック型に対して定義されます。つまり、関数がある場合は、 `mapper: Int -> 'T` 範囲の値をマップし、型の配列を生成でき `'T[]` ます。"
examples: >-
  次の例では、偶数の範囲に1を加算します。


  ```Q#

  let numbers = MappedOverRange(PlusI(1, _), 0..2..10);

  // numbers = [1, 3, 5, 7, 9, 11]

  ```
syntax: "function MappedOverRange (mapper : (Int -> 'T), range : Range) : 'T[]"
input:
  content: "(mapper : (Int -> 'T), range : Range)"
  types:
  - name: mapper
    summary: "`Int` `'T` 範囲値をマップするために使用されるからへの関数。"
    isFunction: true
    input:
      types:
      - isPrimitive: true
        uid: Int
    output:
      types:
      - uid: "'T"
        isLocal: true
  - name: range
    summary: 整数の範囲。
    isPrimitive: true
    uid: Range
output:
  content: "'T[]"
  types:
  - summary: "`'T[]`関数によってマップされる要素の配列 `mapper` 。"
    isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: 関数の結果の型 `mapper` 。
seeAlso:
- microsoft.quantum.arrays.mapped
metadata:
  ms.openlocfilehash: fe918a8f7e74d49834f992442344e99dbcd33422
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91494170"
