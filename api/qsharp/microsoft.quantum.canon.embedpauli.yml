### YamlMime:QSharpType
uid: microsoft.quantum.canon.embedpauli
name: EmbedPauli
type: function
namespace: Microsoft.Quantum.Canon
summary: Single qubit の P# li 演算子と qubit のインデックスが指定されている場合、そのインデックス`PauliI`の指定された単一の qubit 演算子と他のすべてのインデックスで、マルチ Qubit の P# li 演算子を返します。
examples: >-
  配列`[PauliI, PauliI, PauliX, PauliI]`を取得するには、次のようにします。


  ```qsharp

  EmbedPauli(PauliX, 2, 3);

  ```
syntax: 'function EmbedPauli (pauli : Pauli, location : Int, n : Int) : Pauli[]'
input:
  content: '(pauli : Pauli, location : Int, n : Int)'
  types:
  - name: pauli
    summary: 指定された場所に配置される単一の qubit の P# li 演算子。
    isPrimitive: true
    uid: Pauli
  - name: location
    summary: インデックス。ここで`output[location] == pauli`、 `output`はこの関数の出力です。
    isPrimitive: true
    uid: Int
  - name: n
    summary: 返される配列の長さ。
    isPrimitive: true
    uid: Int
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
metadata:
  ms.openlocfilehash: df9cff23b6a7255ec57e944fd1bed140ff18560a
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82675602"
