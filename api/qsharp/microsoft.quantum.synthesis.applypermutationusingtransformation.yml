### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applypermutationusingtransformation
name: ApplyPermutationUsingTransformation
type: operation
namespace: microsoft.quantum.synthesis
summary: >-
  変換ベースの合成を使用した順列を指定して、クォンタムの状態の振幅を Permutes します。


  この手順では、一方向の変換に基づく合成アプローチを実装します。  入力は、$ 2 ^ n $ 要素の順列 $ \ pi $ ($ \{ 0, \ ドット, 2 ^ n-1 $) で、 \} $n $ 変数の元に戻せるブール関数を表します。

  アルゴリズムは、次の手順を繰り返し実行します。


  1. $X \n e & pi (x) = y $ のように、最小の $x $ を検索します。

  2. 出力に適用される複数の制御された Toffoli 操作を見つけます $ \ pi (x) = x $、すべての $x ' < x $ の $ \ pi (x ') $ を変更しません
examples: >-
  操作を合成するには `SWAP` :


  ```Q#

  using (qubits = Qubit[2]) {
    ApplyPermutationUsingTransformation([0, 2, 1, 3], LittleEndian(qubits));
  }

  ```
syntax: 'operation ApplyPermutationUsingTransformation (perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: >-
  - [*D. Michael 明美*、 *Dmitri Maslov*、 *gerhard W. Dueck*、Proc. DAC 2003、IEEE、pp. 318-323、2003](https://doi.org/10.1145/775832.775915)

  - [*Mathias Soeken*、 *Gerhard W. Dueck*2016 *、springer link*、、pp. 307-321、2016を行います。](https://doi.org/10.1007/978-3-319-40578-0_22)
input:
  content: '(perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: 0から始まる $ 2 ^ n $ 要素の順列。
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: 順列が適用される $n $ qubits の一覧。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecomposition
metadata:
  ms.openlocfilehash: e69a5924fc2f0ba46b3764d0cd7619dc78332bd6
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89328017"
