### YamlMime:QSharpType
uid: microsoft.quantum.preparation.preparearbitrarystate
name: PrepareArbitraryState
type: operation
namespace: microsoft.quantum.preparation
summary: >-
  係数とリトルエンディアンでエンコードされたクォンタムレジスタを指定すると、は、指定された係数によって記述されるレジスタに状態を準備します。


  この操作では $n、_j e ^ {i t_j} $ から \ket{\psi} $-qubit コンピューティングベースの状態 $ \ket{0/cドット 0} $ から、複雑な $r 係数を持つ任意のクォンタム状態 $ $ を準備します。

  具体的には、この操作のアクションは、すべてゼロの状態を処理するための $U $ として、


  $ $ \begin{align} U\ket {0... 0} & = \ket{\psi} \\ \\ & = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}} {\ sqrt_ \ sum_ {j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}。

  \end{align} $ $
remarks: 負の入力係数 $r _j < $0 は、値 $ | r_j | $ を持つ正の値として処理されます。 `coefficients` $ 2 ^ n $ 未満の場合は、要素 $ (r_j、t_j) = (0.0, 0.0) $ が埋め込まれます。
syntax: 'operation PrepareArbitraryState (coefficients : Microsoft.Quantum.Math.ComplexPolar[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: '- クォンタムロジック回線の合成、Shende、Stephen、Igor、igor または Markov https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(coefficients : Microsoft.Quantum.Math.ComplexPolar[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: coefficients
    summary: 絶対値とフェーズ $ (r_j、t_j) $ で表される、最大 $ 2 ^ n $ の複合係数の配列。 $J $ th 係数は、リトルエンディアン形式でエンコードされた数値の状態 $ \ket{j} $ にインデックスを付けます。
    isArray: true
    uid: microsoft.quantum.math.complexpolar
  - name: qubits
    summary: リトルエンディアン形式での qubit レジスタのエンコード番号の状態。 この値は、コンピューティングベースの状態 $ \ket{0...0} $ で初期化されることが想定されています。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.preparation.approximatelypreparearbitrarystate
metadata:
  ms.openlocfilehash: ebeeb69e9fb599695bb65beb0ff4a307ec9e613b
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89331672"
