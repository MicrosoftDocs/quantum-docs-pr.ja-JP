### YamlMime:QSharpType
uid: microsoft.quantum.preparation.preparearbitrarystate
name: PrepareArbitraryState
type: operation
namespace: Microsoft.Quantum.Preparation
summary: >-
  指定されたクォンタム状態を準備する操作を返します。


  返された操作 $U $ は、$-qubit コンピューティングベース状態 $ \ket{0...0} $ $n からの複雑な係数 $r j e ^ {i t_j} $ で、任意のクォンタム状態 $ \ket{\psi} $ を準備します。


  $ $ \begin{align} U\ket {0... 0} = \ket{\psi} = \frac{\sum_{j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\sum_{j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}。

  \end{align} $ $
remarks: 負の入力係数 $r j < $0 は、値 $ | r_j | $ を持つ正の値として処理されます。 $ 2 ^ n $ より小さい場合、`coefficients` には要素 $ (r_j, t_j) = (0.0, 0.0) $ が埋め込まれます。
syntax: 'operation PrepareArbitraryState (coefficients : Microsoft.Quantum.Math.ComplexPolar[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: '- クォンタムロジック回線の合成、Shende、Stephen、、Igor または Markov の https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(coefficients : Microsoft.Quantum.Math.ComplexPolar[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: coefficients
    summary: 絶対値とフェーズ $ (r_j, t_j) $ で表される、最大 $ 2 ^ n $ の複合係数の配列。 $J $ th 係数は、リトルエンディアン形式でエンコードされた数値の状態 $ \ket{j} $ にインデックスを付けます。
    isArray: true
    uid: microsoft.quantum.math.complexpolar
  - name: qubits
    summary: リトルエンディアン形式での qubit レジスタのエンコード番号の状態。 この値は、コンピューティングベースの状態 $ \ket{0...0} $ で初期化されることが想定されています。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: f2b26a890fbe9f24f773ae5753cccaf40173d750
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73228156"
