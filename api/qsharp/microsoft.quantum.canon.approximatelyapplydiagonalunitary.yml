### YamlMime:QSharpType
uid: microsoft.quantum.canon.approximatelyapplydiagonalunitary
name: ApproximatelyApplyDiagonalUnitary
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  複雑なフェーズの配列を、qubits のレジスタの数値ベースの状態に適用し、指定された許容範囲に従って小さな回転角度を切り捨てます。


  この操作では、$n $ qubit number $ \ket{j} $ に $e ^ {i \ theta_j} $ という複雑なフェーズを適用する斜線を実装します。

  特に、この操作は、ユニタリで表すことができます。


  $ $ \begin{align} U = \ sum ^ {2 ^ n-1} _ {j = 0} e ^ {i \ theta_j} \ket{j}\bra{j}.

  \end{align} $ $
remarks: '`coefficients`$ 2 ^ n $ 未満の値が指定されている場合は、$ \ theta_j = $0.0 という要素が埋め込まれます。'
syntax: 'operation ApproximatelyApplyDiagonalUnitary (tolerance : Double, coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: '- クォンタムロジック回線の合成、Shende、Stephen、Igor、igor または Markovhttps://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(tolerance : Double, coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: tolerance
    summary: 小さい係数が切り捨てられる公差。
    isPrimitive: true
    uid: Double
  - name: coefficients
    summary: $ 2 ^ n $ 係数 $ \ theta_j $ までの配列。 $J $ th 係数は、リトルエンディアン形式でエンコードされた数値の状態 $ \ket{j} $ にインデックスを付けます。
    isArray: true
    isPrimitive: true
    uid: Double
  - name: qubits
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- applydiagonalunitary
metadata:
  ms.openlocfilehash: ec183b0a42a3e2382a395a4711390c2ab8e9eb85
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82674462"
