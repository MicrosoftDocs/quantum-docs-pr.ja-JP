### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applypermutationusingdecomposition
name: ApplyPermutationUsingDecomposition
type: operation
namespace: microsoft.quantum.synthesis
summary: >-
  分解ベースの合成を使用する順列を指定して、クォンタムの状態の振幅を Permutes します。


  この手順では、分解ベースの合成アプローチを実装します。  入力は、$ 2 ^ n $ 要素の順列 $ \ pi $ ($ \{ 0, \ ドット, 2 ^ n-1 $) で、 \} $n $ 変数の元に戻せるブール関数を表します。

  このアルゴリズムでは、変数インデックス $i $: の各変数について、次の手順を繰り返し実行します。


  1. Compute $ ((\ pi_l, \ pi_r), \ pi ') $ では、$ \ pi_l $ と $ \ pi_r $ のイメージは、要素内のビットを変更しないようにします。 $ \ $ および $ \ $ は、$-pi ' $ のイメージではなく、要素内のビット $i $ を変更しません。

  2. $ \ Pi \leftarrow \ pi ' $ を設定し、固定ポイントではない要素に基づいて $ \ pi_l $ と $ \ pi_r $ から真理のテーブルを派生させます。


  すべての変数インデックスに対してこれらの手順を適用すると、残りの順列 $ \ pi $ が id になります。また、収集された真理テーブルとインデックスに基づいて、 @"microsoft.quantum.intrinsic.x" 操作を使用して、実際のテーブルで制御される操作を適用でき @"microsoft.quantum.synthesis.applyxcontrolledontruthtable" ます。


  変数の順序は、$0、\ ドット、n-$1 です。  操作には、カスタム変数の順序を指定でき @"microsoft.quantum.synthesis.applypermutationusingdecompositionwithvariableorder" ます。
examples: >-
  操作を合成するには `SWAP` :


  ```Q#

  using (qubits = Qubit[2]) {
    ApplyPermutationUsingDecomposition([0, 2, 1, 3], LittleEndian(qubits));
  }

  ```
syntax: 'operation ApplyPermutationUsingDecomposition (perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: >-
  - [*Alexis De Vos*、 *Yvan Van rentergem*、Adv ((2)、2008、pp. 183--200)](http://www.aimsciences.org/article/doi/10.3934/amc.2008.2.183)

  - [*Mathias Soeken*、 *山久 tague*、 *gerhard W Dueck*、 *rolf Drechsler*、シンボル計算のジャーナル 73 (2016)、pp. 1--26](https://www.sciencedirect.com/science/article/pii/S0747717115000188?via%3Dihub)
input:
  content: '(perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: 0から始まる $ 2 ^ n $ 要素の順列。
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: 順列が適用される $n $ qubits の一覧。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecompositionwithvariableorder
- microsoft.quantum.synthesis.applypermutationusingtransformation
metadata:
  ms.openlocfilehash: 3fd7b84cbf403fe271849ae4d8841a1c8123faa0
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89328085"
