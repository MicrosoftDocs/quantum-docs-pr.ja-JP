### YamlMime:QSharpType
uid: microsoft.quantum.preparation.statepreparationcomplexcoefficients
name: StatePreparationComplexCoefficients
type: function
namespace: microsoft.quantum.preparation
summary: >-
  特定のクォンタム状態を準備する操作を返します。


  返された操作 $U $ は、複雑な $r 係数を持つ任意のクォンタム状態 $ \ket{\psi} $ を、$n $-qubit 計算ベースの状態 $ \ket{0...0} $ から _j e ^ {i t_j} $ に準備します。


  新しく割り当てられたレジスタに対する U のアクションは、$ $ \begin{align} U\ket {0... 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | r_j | ^ 2}} によって指定されます。

  \end{align} $ $
remarks: 負の入力係数 $r _j < $0 は、値 $ | r_j | $ を持つ正の値として処理されます。 `coefficients` $ 2 ^ n $ 未満の場合は、要素 $ (r_j、t_j) = (0.0, 0.0) $ が埋め込まれます。
examples: >-
  次のスニペットでは、qubit レジスタの中で、クォンタムの状態が $ \ket{\psi} = e ^ {i 0.1} \ sqrt {1/8} \ k {0} + \ sqrt {7/8} \ k $ に準備されて {2} `qubitsLE` います。


  ```qsharp

  let amplitudes = [Sqrt(0.125), 0.0, Sqrt(0.875), 0.0];

  let phases = [0.1, 0.0, 0.0, 0.0];

  mutable complexNumbers = new ComplexPolar[4];

  for (idx in 0..3) {
      set complexNumbers[idx] = ComplexPolar(amplitudes[idx], phases[idx]);
  }

  let op = StatePreparationComplexCoefficients(complexNumbers);

  using (qubits = Qubit[2]) {
      let qubitsLE = LittleEndian(qubits);
      op(qubitsLE);
  }

  ```
syntax: 'function StatePreparationComplexCoefficients (coefficients : Microsoft.Quantum.Math.ComplexPolar[]) : (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)'
input:
  content: '(coefficients : Microsoft.Quantum.Math.ComplexPolar[])'
  types:
  - name: coefficients
    summary: 絶対値とフェーズ $ (r_j、t_j) $ で表される、最大 $ 2 ^ n $ の複合係数の配列。 $J $ th 係数は、リトルエンディアン形式でエンコードされた数値の状態 $ \ket{j} $ にインデックスを付けます。
    isArray: true
    uid: microsoft.quantum.math.complexpolar
output:
  content: (Microsoft.Quantum.Arithmetic.LittleEndian => Unit is Adj + Ctl)
  types:
  - summary: 状態の準備のためのユニタリ操作 $U $ です。
    isOperation: true
    input:
      types:
      - uid: microsoft.quantum.arithmetic.littleendian
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: f7726320e4e1c5da3cb18b9bc34e4e861000aa33
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89331213"
