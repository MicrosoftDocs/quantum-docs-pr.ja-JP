### YamlMime:QSharpType
uid: microsoft.quantum.convert.boolarrayaspauli
name: BoolArrayAsPauli
type: function
namespace: microsoft.quantum.convert
summary: ビット文字列を指定した場合は、single qubit の演算子の配列として表されるマルチ qubit の P# li 演算子を返します。
remarks: ブール型の配列とクォンタムレジスタは同じ長さである必要があります。
syntax: 'function BoolArrayAsPauli (pauli : Pauli, bitApply : Bool, bits : Bool[]) : Pauli[]'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[])'
  types:
  - name: pauli
    summary: Qubits where に適用する p# li 演算子 `bitsApply == bits[idx]` 。
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: bit がこの値の場合は、P# li を適用します。
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: ブール型の配列。
    isArray: true
    isPrimitive: true
    uid: Bool
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
metadata:
  ms.openlocfilehash: 4481610f1f068bfc6c1bfc9d5de98ad125ae389e
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91481420"
