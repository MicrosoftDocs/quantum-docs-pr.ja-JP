### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.standardamplitudeamplification
name: StandardAmplitudeAmplification
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 標準の振幅増幅アルゴリズム
remarks: '`AmpAmpPhasesStandard`これは、\begin{align} A\ket{0}\_{f} \ket{0}\_s = \lambda\ket{1}\_f\ket {\ text {target}}\_s + \sqrt{1-| \ ラムダ | ^ 2} \ket{0}\_fcドットを想定して計算された、標準の振幅増幅アルゴリズムです。 \end{align} この操作により、\begin{align} \operatorname{AmpAmpByOracle}\ket{0}\_{f} \ket{0}\_s = \ sin ((2n + 1) \ sin ^{-1}(\ ラムダ)) \ket{1}\_f\ket {\ text {target}}\_s + \cdots\ket{0}\_f \end{align} の状態がほとんどの`flagQubit`場合`auxiliaryRegister`に準備され、状態が{0}\_${0}\_\ket f\ket a $ に初期化されます。'
syntax: 'function StandardAmplitudeAmplification (nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
references: '- [*Hoyer、m.、M、Mosca、A. Tapp。*](https://arxiv.org/abs/quant-ph/0005055)'
input:
  content: '(nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: nIterations
    summary: 振幅増幅数 $n の反復回数
    isPrimitive: true
    uid: Int
  - name: stateOracle
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: フラグ qubit へのインデックス
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 標準の振幅増幅クォンタムアルゴリズムを実装する操作
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: 0fc7ceb390a64ce6224a084147207663d96c3b75
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676926"
