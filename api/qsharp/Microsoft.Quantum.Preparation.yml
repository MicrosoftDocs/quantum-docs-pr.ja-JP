### YamlMime:QSharpNamespace
uid: microsoft.quantum.preparation
name: Microsoft.Quantum.Preparation
summary: " # <a name=\"summary\"></a>まとめ\n この名前空間には、任意の初期状態に qubits を準備するための関数と操作が含まれています。"
functions:
- uid: microsoft.quantum.preparation.blochspherecoordinates
  summary: >-
    シングル qubit 状態の Bloch 球座標を計算します。


    2つの複素数を $a 0、a1 $ は qubit 状態を表し、\ket{0}が 0 + a1 \ket{1} = r e ^ {it} (e ^ {-i/phi/2}\cos{(\ シータ/2)} \ket{0}+ e ^ {i/phi/2}\sin{(\ シータ/2)} \ket{1}) $ $a というように計算されます。
- uid: microsoft.quantum.preparation.quantumrom
  summary: >-
    は、指定された密度マトリックスを表すために、クォンタム ROM の手法を使用します。


    $N $ 係数 $ \ alpha_j $ のリストが指定されている場合、$U この例では、クォンタム-ROM 手法を使用して近似 $ \tilde\rho\ sum_ {j = 0} ^ {N-1} p_j 密度マトリックス $ \rho = \ sum_ {j = 0} ^ {N-1} \frac{| alpha_j |} の purification の \ket{j}\bra{j} $ を準備します。{\ sum_k | \ alpha_k |}\ket{j}\bra{j} $。 この近似値では、$/イプシロン $ というエラーが $ | p_j-\frac{| alpha_j |} のようになります。{\ sum_k | \ alpha_k |} |\ le/イプシロン/N $ と $\|\tilde\rho-\rho\| $。 つまり、$ $ \begin{align} U\ket{0}^ {\Lceil\ log_2 N\r ceil} \ k{0}^ {m} = \ sum_ {j = 0} ^ {N-1} \ sqrt{p_j} \ket{j}\ket{\text{garbage} _j} です。

    \end{align} $ $
- uid: microsoft.quantum.preparation.quantumromqubitcount
  summary: によって`QuantumROM`返された操作に割り当てる必要がある qubits の合計数を返します。
- uid: microsoft.quantum.preparation.statepreparationcomplexcoefficients
  summary: >-
    特定のクォンタム状態を準備する操作を返します。


    返された操作 $U $ は、複雑な $r 係数を持つ任意のクォンタム状態 $ \ket{\psi} $ を、$n $-qubit 計算ベースの状態 $ \ket{0...0} $ から _j e ^ {i t_j} $ に準備します。


    新しく割り当てられたレジスタに対する U のアクションは、$ $ \begin{align} U\ket {0... 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | r_j | ^ 2}} によって指定されます。

    \end{align} $ $
- uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
  summary: >-
    指定されたクォンタム状態を準備する操作を返します。


    返された操作 $U $ は、$ \ket{0...0} $ という $n から正の係数 $ \ $0 alpha_j を含む任意のクォンタム状態 $ \ket{\psi} $ を準備します。


    新しく割り当てられたレジスタの U のアクションは、$ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} \ alpha_j \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | \ alpha_j | ^ 2}} によって指定されます。

    \end{align} $ $
operations:
- uid: microsoft.quantum.preparation.approximatelypreparearbitrarystate
  summary: 係数とリトルエンディアンでエンコードされたクォンタムレジスタを指定すると、は指定された係数によって示されるレジスタの状態を、指定された近似値に設定します。
- uid: microsoft.quantum.preparation.preparearbitrarystate
  summary: 係数とリトルエンディアンでエンコードされたクォンタムレジスタを指定すると、は、指定された係数によって記述されるレジスタに状態を準備します。
- uid: microsoft.quantum.preparation.preparechoistate
  summary: 指定された操作について、指定された参照およびターゲットレジスタに Jamiłkowski 状態を準備します。
- uid: microsoft.quantum.preparation.preparechoistatea
  summary: 指定された参照およびターゲットレジスタに adjoint バリアントを使用して、指定された操作に対して Jamiłkowski 状態を準備します。
- uid: microsoft.quantum.preparation.preparechoistatec
  summary: 指定された参照およびターゲットレジスタに制御されるバリアントを持つ特定の操作に対して、[Jamiłkowski] 状態を準備します。
- uid: microsoft.quantum.preparation.preparechoistateca
  summary: 指定された参照およびターゲットレジスタに対し、制御されるバリアントと adjoint バリアントの両方を持つ特定の操作に対して、[Jamiłkowski] 状態を準備します。
- uid: microsoft.quantum.preparation.prepareentangledstate
  summary: >-
    2つの qubit レジスタがペアになります。


    つまり、2つのレジスタが指定されている場合、各レジスタの{1}qubits の{2}各ペアの間に{00} 、${11} \ket{0\cdots 0} $ 状態で各レジスタが開始されたと仮定して、下回っありの状態 $ \ frac {\ sqrt} \ left (\ket + \ket/right) $ を準備します。
- uid: microsoft.quantum.preparation.prepareidentity
  summary: >-
    レジスタが指定されている場合、そのレジスタを下回っ混合状態で準備します。


    レジスタは、depolarizing チャネル全体を各 qubit に適用することで、$/bold done/2 ^ N $ 状態で準備されます。ここで $N $ はレジスタの長さです。
- uid: microsoft.quantum.preparation.preparequbit
  summary: >-
    指定された Pauli 演算子の`Zero`+ 1 () eigenstate で qubit を準備します。

    Id 演算子が指定されている場合、qubit は下回っ mixed 状態で準備されます。


    Qubit が最初に $ \ket{0}$ 状態であった場合、この操作は、指定された p li 演算子の $ + $1 eigenstate の qubit を準備`PauliI`します。または、の場合は<xref:microsoft.quantum.preparation.preparesinglequbitidentity>、代わりに下回っ mixed 状態 (を参照) で qubit を準備します。


    Qubit が $ \ket{0}$ 以外の状態であった場合、この操作では次のゲートが適用さ`PauliX`れます。 $H `PauliY`$ for、$HS `PauliZ` $ <xref:microsoft.quantum.preparation.preparesinglequbitidentity> for `PauliI`、$I $ for および for。
- uid: microsoft.quantum.preparation.preparesinglequbitidentity
  summary: >-
    下回っ混合状態で qubit を準備します。


    Depolarizing channel $ $ \begin{align}/オメガ (\rho) \mathrel{を適用して、指定された qubit を $-bold done/$2 状態で準備します。{1} {4} =} & lt ac \ sum_ \{{\ mu \ in 0,\}1, 2\_, 3}-シグマ {\rho\_} ^ {-dagger}, \end{align} $ $ ここで\_、$ \rho $ は混合状態を表す密度演算子で、$ $ は、混合の状態を表しています。 $i
- uid: microsoft.quantum.preparation.prepareuniformsuperposition
  summary: >-
    0 ~ をエンコードする州に対して`nIndices`一様な法則を作成します。


    つまり、このユニタリ $U $ は、入力状態が $ \ket{0\cdots 0} $ の場合に、すべての数値の州 $0 $ に対して $M-$1 に対して uniform 法則を作成します。 つまり、$ $ \begin{align} U\ket{0}= \ frac{1}{\ sqsum_ rt{\ket{j}. {j = 0} ^ {m.-1}

    \end{align} $ $。
metadata:
  ms.openlocfilehash: 25ebe80b64af0cfd50e5a32c1ef91f8a299cef04
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82673086"
