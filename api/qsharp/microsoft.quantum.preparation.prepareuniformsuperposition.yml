### YamlMime:QSharpType
uid: microsoft.quantum.preparation.prepareuniformsuperposition
name: PrepareUniformSuperposition
type: operation
namespace: microsoft.quantum.preparation
summary: >-
  0 ~ をエンコードする州に対して一様な法則を作成し `nIndices` ます。


  つまり、このユニタリ $U $ は、入力状態が $ \ket{0\cdots 0} $ の場合に、すべての数値の州 $0 $ に対して $M-$1 に対して uniform 法則を作成します。 つまり、$ $ \begin{align} U\ket {0} = \ frac {\ {1} sqsum_ rt{\ket{j}. {j = 0} ^ {m.-1}

  \end{align} $ $。
examples: >-
  次の例では、 {1} $3 $ qubits で、$ & frac {\ sqrt {6} } \ sum_ {j = 0} ^ \ket{j} $ の状態を準備し {5} ます。


  ```Q#

  let nIndices = 6;

  using(indexRegister = Qubit[3]) {
      PrepareUniformSuperposition(nIndices, LittleEndian(indexRegister));
  }

  ```
syntax: 'operation PrepareUniformSuperposition (nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: nIndices
    summary: Uniform 法則内で、必要な状態の数を $ $M します。
    isPrimitive: true
    uid: Int
  - name: indexRegister
    summary: >-
      数値の状態を形式で格納する qubit レジスタ `LittleEndian` 。

      このレジスタは $M-$1 の数値を格納できる必要があり、$ \ket{0\cdots 0} $ という状態で初期化されると想定されています。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 442daa4affb6b59191af9117a8094f7bfbf71302
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89331332"
