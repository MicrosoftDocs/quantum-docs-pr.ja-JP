### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplybymodularinteger
name: MultiplyByModularInteger
type: operation
namespace: microsoft.quantum.arithmetic
summary: >-
  Qubit レジスタで整数定数を使ってモジュール乗算を実行します。


  $ `modulus` と $a $ を $N し `constMultiplier` てください。

  次に、この操作では、計算基準に基づいて、次のマップによって定義される、"$ $ \begin{align} \ket{y} \ket{(a-cdot y)" $1 $N & \end{align}} N} $ $ $0 $y を実装します。
remarks: >-
  - 回路図と説明については、arXiv のページ8の図7を参照してください [: quant-ph/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=8)

  - この操作は Arxiv の U ₐに対応し [ます: quant-ph/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf)
syntax: 'operation MultiplyByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    summary: 乗数を乗算する定数。 係数は連にする必要があります。
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: 乗算演算が実行され `modulus` ます。
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: >-
      定数を乗算した数値。

      これは、リトルエンディアン形式で整数をエンコードする qubits の配列です。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 4ebbe9808772f51b1a7b2b3caf47379e74bd823e
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89353517"
