### YamlMime:QSharpType
uid: microsoft.quantum.canon.applypaulifrombitstring
name: ApplyPauliFromBitString
type: operation
namespace: Microsoft.Quantum.Canon
summary: ブール値配列の対応するビットが指定された入力と一致する場合、配列内の各 qubit に対して P# li 演算子を適用します。
remarks: ブール型の配列とクォンタムレジスタは同じ長さである必要があります。
syntax: 'operation ApplyPauliFromBitString (pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[]) : Unit'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[])'
  types:
  - name: pauli
    summary: Where に`qubits[idx]`適用する p# li 演算子`bitsApply == bits[idx]`
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: bit がこの値の場合は P# li を適用します
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: の`qubits`対応する qubit を指定するブールレジスタ
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: qubits
    summary: 指定された P# li 演算子を選択的に適用するクォンタムレジスタ
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 5a65ec2aae17a1469e820e8cd14a0d50d0639015
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82672424"
