### YamlMime:QSharpType
uid: microsoft.quantum.canon.applypaulifrombitstring
name: ApplyPauliFromBitString
type: operation
namespace: microsoft.quantum.canon
summary: ブール値配列の対応するビットが指定された入力と一致する場合、配列内の各 qubit に対して P# li 演算子を適用します。
remarks: ブール型の配列とクォンタムレジスタは同じ長さである必要があります。
syntax: 'operation ApplyPauliFromBitString (pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[]) : Unit'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[], qubits : Qubit[])'
  types:
  - name: pauli
    summary: Where に適用する p# li 演算子 `qubits[idx]``bitsApply == bits[idx]`
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: bit がこの値の場合は P# li を適用します
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: の対応する qubit を指定するブールレジスタ `qubits`
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: qubits
    summary: 指定された P# li 演算子を選択的に適用するクォンタムレジスタ
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 7efea4ea34ee1ae68695aa74142ebf6bce93d289
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89357971"
