### YamlMime:QSharpNamespace
uid: microsoft.quantum.arithmetic
name: Microsoft.Quantum.Arithmetic
summary: " # <a name=\"summary\"></a>まとめ\n この名前空間には、一貫 compute 算術演算に使用される関数と操作が含まれています。"
functions:
- uid: microsoft.quantum.arithmetic.bigendianaslittleendian
  summary: Qubit の `BigEndian` 順序を逆にして、qubit レジスタを `LittleEndian` qubit レジスタに変換します。
- uid: microsoft.quantum.arithmetic.identicalformatfactfxp
  summary: 指定された配列内のすべての固定小数点数のポイント位置と qubit 数値が同一であることをアサートします。
- uid: microsoft.quantum.arithmetic.identicalpointposfactfxp
  summary: 指定された配列内のすべての固定小数点数が、最下位ビットからカウントされるときに同一のポイント位置を持つことをアサートします。 つまり、ビット数からポイント位置を引いた値は、配列内のすべての固定小数点数に対して定数である必要があります。
- uid: microsoft.quantum.arithmetic.littleendianasbigendian
  summary: Qubit の `LittleEndian` 順序を逆にして、qubit レジスタを `BigEndian` qubit レジスタに変換します。
- uid: microsoft.quantum.arithmetic.reversedopbe
  summary: ビッグエンディアン入力を受け取る操作が指定された場合、は、リトルエンディアン入力を受け取る新しい操作を返します。
- uid: microsoft.quantum.arithmetic.reversedopbea
  summary: ビッグエンディアン入力を受け取る操作が指定された場合、は、リトルエンディアン入力を受け取る新しい操作を返します。
- uid: microsoft.quantum.arithmetic.reversedopbec
  summary: ビッグエンディアン入力を受け取る操作が指定された場合、は、リトルエンディアン入力を受け取る新しい操作を返します。
- uid: microsoft.quantum.arithmetic.reversedopbeca
  summary: ビッグエンディアン入力を受け取る操作が指定された場合、は、リトルエンディアン入力を受け取る新しい操作を返します。
- uid: microsoft.quantum.arithmetic.reversedople
  summary: リトルエンディアン入力を受け取る操作が指定された場合、は、ビッグエンディアン入力を受け取る新しい操作を返します。
- uid: microsoft.quantum.arithmetic.reversedoplea
  summary: リトルエンディアン入力を受け取る操作が指定された場合、は、ビッグエンディアン入力を受け取る新しい操作を返します。
- uid: microsoft.quantum.arithmetic.reversedoplec
  summary: リトルエンディアン入力を受け取る操作が指定された場合、は、ビッグエンディアン入力を受け取る新しい操作を返します。
- uid: microsoft.quantum.arithmetic.reversedopleca
  summary: リトルエンディアン入力を受け取る操作が指定された場合、は、ビッグエンディアン入力を受け取る新しい操作を返します。
operations:
- uid: microsoft.quantum.arithmetic.addconstantfxp
  summary: クォンタム固定小数点数に古典定数を追加します。
- uid: microsoft.quantum.arithmetic.addfxp
  summary: クォンタムレジスタに格納されている2つの固定小数点数を追加します。
- uid: microsoft.quantum.arithmetic.addi
  summary: では、のレジスタサイズに応じて、キャリーとの加算が自動的に選択さ `ys` れます。
- uid: microsoft.quantum.arithmetic.applyleoperationonphasele
  summary: <xref:microsoft.quantum.arithmetic.phaselittleendian>型のターゲットレジスタに対してレジスタを入力として受け取る操作を適用 <xref:microsoft.quantum.arithmetic.littleendian> します。
- uid: microsoft.quantum.arithmetic.applyleoperationonphaselea
  summary: <xref:microsoft.quantum.arithmetic.phaselittleendian>型のターゲットレジスタに対してレジスタを入力として受け取る操作を適用 <xref:microsoft.quantum.arithmetic.littleendian> します。
- uid: microsoft.quantum.arithmetic.applyleoperationonphaselec
  summary: <xref:microsoft.quantum.arithmetic.phaselittleendian>型のターゲットレジスタに対してレジスタを入力として受け取る操作を適用 <xref:microsoft.quantum.arithmetic.littleendian> します。
- uid: microsoft.quantum.arithmetic.applyleoperationonphaseleca
  summary: <xref:microsoft.quantum.arithmetic.phaselittleendian>型のターゲットレジスタに対してレジスタを入力として受け取る操作を適用 <xref:microsoft.quantum.arithmetic.littleendian> します。
- uid: microsoft.quantum.arithmetic.applymajorityinplace
  summary: Qubit のレジスタに対して、3つの qubit マジョリティ操作をインプレースで適用します。
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonle
  summary: <xref:microsoft.quantum.arithmetic.littleendian>型のターゲットレジスタに対してレジスタを入力として受け取る操作を適用 <xref:microsoft.quantum.arithmetic.phaselittleendian> します。
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonlea
  summary: ''
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonlec
  summary: ''
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonleca
  summary: ''
- uid: microsoft.quantum.arithmetic.applyreversedopbe
  summary: リトルエンディアン入力をリトルエンディアン形式で符号なし整数にエンコードする操作を適用します。
- uid: microsoft.quantum.arithmetic.applyreversedopbea
  summary: リトルエンディアン入力をリトルエンディアン形式で符号なし整数にエンコードする操作を適用します。
- uid: microsoft.quantum.arithmetic.applyreversedopbec
  summary: リトルエンディアン入力をリトルエンディアン形式で符号なし整数にエンコードする操作を適用します。
- uid: microsoft.quantum.arithmetic.applyreversedopbeca
  summary: リトルエンディアン入力をリトルエンディアン形式で符号なし整数にエンコードする操作を適用します。
- uid: microsoft.quantum.arithmetic.applyreversedople
  summary: ビッグエンディアン形式を使用して符号なし整数をエンコーディングするレジスタに、リトルエンディアン入力を受け取る操作を適用します。
- uid: microsoft.quantum.arithmetic.applyreversedoplea
  summary: ビッグエンディアン形式を使用して符号なし整数をエンコーディングするレジスタに、リトルエンディアン入力を受け取る操作を適用します。
- uid: microsoft.quantum.arithmetic.applyreversedoplec
  summary: ビッグエンディアン形式を使用して符号なし整数をエンコーディングするレジスタに、リトルエンディアン入力を受け取る操作を適用します。
- uid: microsoft.quantum.arithmetic.applyreversedopleca
  summary: ビッグエンディアン形式を使用して符号なし整数をエンコーディングするレジスタに、リトルエンディアン入力を受け取る操作を適用します。
- uid: microsoft.quantum.arithmetic.applyxorinplace
  summary: 古典的な整数と、qubits のレジスタによって表される整数の間のビットごとの XOR 演算を適用します。
- uid: microsoft.quantum.arithmetic.assertallzerofxp
  summary: クォンタムの固定小数点数が0に初期化されることをアサートするヘルパー関数。つまり、すべての qubits は状態が $ \ket $ になります。 {0}
- uid: microsoft.quantum.arithmetic.assertmostsignificantbit
  summary: 符号なし整数を表す qubit レジスタの最上位の qubit が特定の状態であることをアサートします。
- uid: microsoft.quantum.arithmetic.assertphaselessthan
  summary: PhaseLittleEndian でエンコードされたが未満であることをアサート `number` `value` します。
- uid: microsoft.quantum.arithmetic.assertprobint
  summary: クォンタムレジスタの特定の状態の確率に予期される値があることをアサートします。
- uid: microsoft.quantum.arithmetic.carry
  summary: 元に戻す伝達ゲートを実装します。 Qubit でエンコードされたキャリービット `carryIn` と、およびでエンコードされた2つの summand ビットがある `summand1` `summand2` 場合、はのビットごとの xor を計算し、 `carryIn` `summand1` `summand2` qubit で `summand2` は xor は qubit に対してになり `carryOut` ます。
- uid: microsoft.quantum.arithmetic.comparegreaterthanfxp
  summary: クォンタムレジスタに格納されている2つの固定小数点数を比較し、結果のフリップを制御します。
- uid: microsoft.quantum.arithmetic.comparegti
  summary: '整数比較の `result = x > y` ラッパー:'
- uid: microsoft.quantum.arithmetic.comparegtsi
  summary: '符号付き整数比較のラッパー: `result = xs > ys` 。'
- uid: microsoft.quantum.arithmetic.compareusingripplecarry
  summary: この操作では、qubits のレジスタによって表される整数がもう1つの整数より大きいかどうかをテストして、結果の XOR を出力 qubits に適用します。
- uid: microsoft.quantum.arithmetic.computereciprocalfxp
  summary: $ 1/x $ を計算します (固定小数点数 $x $)。
- uid: microsoft.quantum.arithmetic.computereciprocali
  summary: 整数除算を使用して、符号なし整数 x の逆数 1/x を計算します。 整数として解釈される結果はになり `floor(2^(2*n-1) / x)` ます。
- uid: microsoft.quantum.arithmetic.copymostsignificantbit
  summary: 符号なし整数を表す qubit レジスタの最上位ビットを `from` qubit にコピーし `target` ます。
- uid: microsoft.quantum.arithmetic.dividei
  summary: 2つのクォンタム整数を除算します。
- uid: microsoft.quantum.arithmetic.evaluateevenpolynomialfxp
  summary: 固定小数点表現で偶数の多項式を評価します。
- uid: microsoft.quantum.arithmetic.evaluateoddpolynomialfxp
  summary: 固定小数点表現で奇数の多項式を評価します。
- uid: microsoft.quantum.arithmetic.evaluatepolynomialfxp
  summary: 固定小数点表現で多項式を評価します。
- uid: microsoft.quantum.arithmetic.greaterthan
  summary: Qubit レジスタにエンコードされた2つの整数の間で、比較の結果に基づいてターゲットの qubit を反転させることにより、より大きい比較を適用します。
- uid: microsoft.quantum.arithmetic.incrementbyinteger
  summary: フェーズ回転を使用して、古典的な整数によって署名されていないクォンタムレジスタをインクリメントします。
- uid: microsoft.quantum.arithmetic.incrementbymodularinteger
  summary: 整数定数によって、qubit レジスタのモジュール単位インクリメントを実行します。
- uid: microsoft.quantum.arithmetic.incrementphasebyinteger
  summary: フェーズ回転を使用して、古典的な整数によって署名されていないクォンタムレジスタをインクリメントします。
- uid: microsoft.quantum.arithmetic.incrementphasebymodularinteger
  summary: 整数定数によって、qubit レジスタのモジュール単位インクリメントを実行します。
- uid: microsoft.quantum.arithmetic.invert2ssi
  summary: 指定された整数剰余2の補数を反転します。
- uid: microsoft.quantum.arithmetic.maj
  summary: これにより、インプレースマジョリティ操作が3つの qubits に適用されます。
- uid: microsoft.quantum.arithmetic.measurefxp
  summary: 固定小数点数を測定し、その値を Double として返し、すべてのレジスタをゼロにリセットします。
- uid: microsoft.quantum.arithmetic.measureinteger
  summary: クォンタムレジスタの内容を測定し、整数に変換します。 測定は、標準の計算基準 (つまり、の eigenbasis) に対して実行され `PauliZ` ます。
- uid: microsoft.quantum.arithmetic.multiplyandaddbymodularinteger
  summary: Qubit レジスタに対して、モジュールの乗算および加算による整数定数を実行します。
- uid: microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger
  summary: MultiplyAndAddByModularInteger と同じですが、summand が QFT ベースで整数をエンコードすることを前提としています。
- uid: microsoft.quantum.arithmetic.multiplybymodularinteger
  summary: Qubit レジスタで整数定数を使ってモジュール乗算を実行します。
- uid: microsoft.quantum.arithmetic.multiplyfxp
  summary: クォンタムレジスタの2つの固定小数点数を乗算します。
- uid: microsoft.quantum.arithmetic.multiplyi
  summary: 整数 `xs` を整数で乗算 `ys` し、結果をに格納し `result` ます。最初はゼロである必要があります。
- uid: microsoft.quantum.arithmetic.multiplysi
  summary: 符号付き整数 `xs` を符号付き整数で乗算 `ys` し、結果をに格納し `result` ます。最初はゼロである必要があります。
- uid: microsoft.quantum.arithmetic.preparefxp
  summary: クォンタム固定小数点数を古典定数に初期化します。
- uid: microsoft.quantum.arithmetic.reflectaboutinteger
  summary: 指定された古典的な整数に関するクォンタムレジスタを反映します。
- uid: microsoft.quantum.arithmetic.ripplecarryaddercdkm
  summary: 元に戻すことができ、2つの整数がインプレース適用されます。
- uid: microsoft.quantum.arithmetic.ripplecarryadderd
  summary: >-
    元に戻すことができ、2つの整数がインプレース適用されます。

    LittleEndian レジスタにエンコードされた2つの $n $ ビット整数 `xs` `ys` と、qubit が渡された場合、演算は2つの整数の合計を計算します。この2つの整数は、結果の最下位の $n $ が保持され、 `ys` 実行ビットは qubit に xor され `carry` ます。
- uid: microsoft.quantum.arithmetic.ripplecarryaddernocarryttk
  summary: 元に戻すことができ、インプレースリップは実行されずに2つの整数を追加します。
- uid: microsoft.quantum.arithmetic.ripplecarryadderttk
  summary: >-
    元に戻すことができ、2つの整数がインプレース適用されます。

    LittleEndian レジスタにエンコードされた2つの $n $ ビット整数 `xs` `ys` と、qubit が渡された場合、演算は2つの整数の合計を計算します。この2つの整数は、結果の最下位の $n $ が保持され、 `ys` 実行ビットは qubit に xor され `carry` ます。
- uid: microsoft.quantum.arithmetic.squarefxp
  summary: は固定小数点数を二乗します。
- uid: microsoft.quantum.arithmetic.squarei
  summary: 整数の2乗をに計算し `xs` `result` ます。最初はゼロである必要があります。
- uid: microsoft.quantum.arithmetic.squaresi
  summary: 2乗符号付き整数 `xs` 。結果をに格納します `result` 。最初はゼロである必要があります。
- uid: microsoft.quantum.arithmetic.sum
  summary: 元に戻すことができない合計ゲートを実装します。 Qubit でエンコードされたキャリービット `carryIn` と、とでエンコードされた2つの summand ビットを指定すると `summand1` 、とのビット `summand2` ごとの xor を計算し `carryIn` `summand1` `summand2` `summand2` ます。
newtypes:
- uid: microsoft.quantum.arithmetic.bigendian
  summary: ビッグエンディアンの順序で符号なし整数をエンコードするレジスタ。 Qubit with index は、 `0` 符号なし整数の最上位ビットをエンコードします。
- uid: microsoft.quantum.arithmetic.fixedpoint
  summary: 固定小数点数をエンコードする qubits のレジスタを表します。 は、バイナリポイントの左側にある qubits の数と等しい整数で構成されます。つまり、1以上の重みの qubits と、クォンタムレジスタです。
- uid: microsoft.quantum.arithmetic.littleendian
  summary: 符号なし整数をリトルエンディアン順にエンコードするレジスタ。 Qubit with index は、 `0` 符号なし整数の最下位ビットをエンコードします。
- uid: microsoft.quantum.arithmetic.phaselittleendian
  summary: >-
    QFT のリトルエンディアン符号なし整数。


    たとえば、$ \ket{x} $ が計算のために $ $x 整数のリトルエンディアンエンコーディングである場合、$ \ket{x} $ は QFT の $x $ のエンコーディングとして使用されます。
- uid: microsoft.quantum.arithmetic.signedlittleendian
  summary: リトルエンディアンに格納されている符号付き整数の型 (「LittleEndian」を参照)。
metadata:
  ms.openlocfilehash: 6e43f31c738b48413ead40e16fbbfe4185b8a57d
  ms.sourcegitcommit: a35498492044be4018b4d1b3b611d70a20e77ecc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 06/03/2020
  ms.locfileid: "84326729"
