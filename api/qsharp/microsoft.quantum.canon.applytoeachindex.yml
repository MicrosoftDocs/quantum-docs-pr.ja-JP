### YamlMime:QSharpType
uid: microsoft.quantum.canon.applytoeachindex
name: 各インデックスの適用
type: operation
namespace: Microsoft.Quantum.Canon
summary: レジスタ内のインデックスが付けられた各要素に単一の qubit 演算を適用します。
syntax: "operation ApplyToEachIndex (singleElementOperation : ((Int, 'T) => Unit), register : 'T[]) : Unit"
input:
  content: '(singleElementOperation: ((Int, t) = > Unit)、register: t [])'
  types:
  - name: singleElementOperation
    summary: 各 qubit に適用する操作。
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Int
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: registrations
    summary: 指定された操作を適用する qubits の配列。
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: 単位
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 各操作が動作するターゲット。
seeAlso:
- microsoft.quantum.canon.applytoeach
- microsoft.quantum.canon.applytoeachindexa
- microsoft.quantum.canon.applytoeachindexc
- microsoft.quantum.canon.applytoeachindexca
ms.openlocfilehash: 1cbe6b342dc3d821c082a959bebbdaaada1f9763
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 10/30/2019
ms.locfileid: "73068514"
