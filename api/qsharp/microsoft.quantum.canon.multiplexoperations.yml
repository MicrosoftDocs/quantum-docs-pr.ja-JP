### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexoperations
name: MultiplexOperations
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  数値の状態の配列によって制御される操作の配列を適用します。


  つまり、$n $ qubit number $ \ket{j} $ によって制御されている場合に、$V j $ という数値を適用する $U $ に適用されます。


  $U = \ sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $。
remarks: $ 2 ^ n $ 未満の値が指定されている場合、`coefficients` には id 要素が埋め込まれます。 この実装では、$n-$1 ancilla qubits を使用します。
syntax: "operation MultiplexOperations (unitaries : ('T => Unit is Adj + Ctl)[], index : Microsoft.Quantum.Arithmetic.LittleEndian, target : 'T) : Unit"
references: '- クォンタム速度を Childs、Dmitri Maslov、Yunseong、Neil、Ross、人民 https://arxiv.org/abs/1711.10980 Su を使用して最初のクォンタムシミュレーションに向けて'
input:
  content: "(unitaries : ('T => Unit is Adj + Ctl)[], index : Microsoft.Quantum.Arithmetic.LittleEndian, target : 'T)"
  types:
  - name: unitaries
    summary: 最大 $ 2 ^ n $ のユニタリ操作の配列。 $J $ th 操作は、リトルエンディアン形式でエンコードされた数値の状態 $ \ket{j} $ によってインデックスが付けられます。
    isArray: true
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: index
    summary: 数値の状態をリトルエンディアン形式でエンコードする $-qubit コントロールレジスタ $n ます。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: $V j $ が動作する汎用 qubit レジスタ。
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: bd248ece9d76729a33db3dfead177fa68909f438
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73223498"
