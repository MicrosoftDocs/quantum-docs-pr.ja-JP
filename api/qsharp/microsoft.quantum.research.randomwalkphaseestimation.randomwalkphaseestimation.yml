### YamlMime:QSharpType
uid: microsoft.quantum.research.randomwalkphaseestimation.randomwalkphaseestimation
name: RandomWalkPhaseEstimation
type: operation
namespace: Microsoft.Quantum.Research.RandomWalkPhaseEstimation
summary: 指定された oracle および eigenstate からの古典的な測定結果に対するベイジアン推定を概算するランダムウォークを使用して反復フェーズ推定を実行します。
remarks: >-
  ### <a name="iterative-phase-estimation-and-eigenstates"></a>反復フェーズの推定と Eigenstates


  一般に、入力レジスタ `eigenstate` は $U $ の eigenstate $ \ket{\phi} $ である必要はありませんが、eigenstate の法則にすることができます。 入力状態が、\begin{align} \ket{\psi} & = \ sum\_{j} \ alpha\_j \ket{\phi\_j}, \end{align} によって指定されているとします。ここで、$\{\ alpha\_j\}$ は、$ \ sum\_j | のような複雑な係数です\_j | ^ 2 = $1、where $U \ket{\phi\_j} = \ phi\_j\ket {\ phi\_j} $。


  次に、[開発ガイド](xref:microsoft.quantum.libraries.characterization#iterative-phase-estimation-without-eigenstates)で説明されているように、反復フェーズの推定を実行すると、最終的に1つの eigenstate に収束します。


  ### <a name="experiment-design"></a>実験の設計


  `oracle` に渡された $t $ と反転角度 $ \ シータ $ の測定時間は、*パーティクル推測のヒューリスティック*、\begin{align} (-phi)、{1}および (\variance{\phi}}.) に従って選択されます。

  \end{align} このヒューリスティックは、予期される事後分散を、標準の前提条件下で反復フェーズ推定で削減するのに最適です。


  ### <a name="optimality"></a>たいてい


  この操作では、2次損失 $L (\ phi, \hat{\phi}) \mathrel{: =} (\hat{\phi}) ^ 2 $ を使用して評価された、フェーズ $/phi $ の最適な推定に近似されます。


  反復フェーズ推定の統計の詳細については、「[ベイジアンフェーズの推定](xref:microsoft.quantum.libraries.characterization#bayesian-phase-estimation)」を参照してください。
syntax: 'operation RandomWalkPhaseEstimation (initialMean : Double, initialStdDev : Double, nMeasurements : Int, maxMeasurements : Int, unwind : Int, oracle : Microsoft.Quantum.Oracles.ContinuousOracle, targetState : Qubit[]) : Double'
references: >-
  - Ferrie *et al.* 2011 [doi:10/tfx](https://doi.org/10.1007/s11128-012-0407-6)、 [arxiv: 1110.3067](https://arxiv.org/abs/1110.3067)。

  - Wiebe *2013* [doi:10/tf3](https://doi.org/10.1103/PhysRevLett.112.190501)、 [arxiv: 1309.0876](https://arxiv.org/abs/1309.0876)

  - Wiebe と Granade 2018 *(準備中)*。
input:
  content: '(initialMean : Double, initialStdDev : Double, nMeasurements : Int, maxMeasurements : Int, unwind : Int, oracle : Microsoft.Quantum.Oracles.ContinuousOracle, targetState : Qubit[])'
  types:
  - name: initialMean
    summary: 最初の標準正規分布の平均値 $-phi $。
    isPrimitive: true
    uid: Double
  - name: initialStdDev
    summary: 初期正規分布の標準偏差 ($/phi $ 経由)。
    isPrimitive: true
    uid: Double
  - name: nMeasurements
    summary: 最終的な事後見積もらに許容される測定値の数。
    isPrimitive: true
    uid: Int
  - name: maxMeasurements
    summary: 操作が失敗したと見なされるまでに取得できる測定の合計数。
    isPrimitive: true
    uid: Int
  - name: unwind
    summary: 整合性チェックが失敗した場合に破棄する結果の数。
    isPrimitive: true
    uid: Int
  - name: oracle
    summary: $U (t) \ket{\phi} = e ^ {i t \phi}\ket{\phi} $ for eigenstates $ \ket{\phi} $ (不明なフェーズ $ \ phi \、\mathbb{R} ^ + $) を含む、型の $U $ を表す演算。
    uid: microsoft.quantum.oracles.continuousoracle
  - name: targetState
    summary: $ Act $U れるレジスタ。
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Double
  types:
  - summary: '最終的な推定 $ \hat{\phi} \mathrel{: =} \ [-phi] $ が期待される場合は、事後によって受け入れられるすべてのデータが返されます。'
    isPrimitive: true
    uid: Double
ms.openlocfilehash: 795849b617a7d47ff5b304e8d2aa5f2f26eee308
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ja-JP
ms.lasthandoff: 10/31/2019
ms.locfileid: "73232049"
