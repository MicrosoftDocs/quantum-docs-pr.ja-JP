### YamlMime:QSharpType
uid: microsoft.quantum.canon.controlledonbitstring
name: ControlledOnBitString
type: function
namespace: Microsoft.Quantum.Canon
summary: >-
  制御レジスタの状態が指定したビットマスクに対応する場合に、ターゲットレジスタに oracle を適用する、ユニタリ操作を返します。


  この関数の出力は、\begin{align} U \ket{b_0 b_1/cドット b_ {n-1}} \ket{\psi} = \ket{b_0 b_1 \ cドット b_ {n-1}} という $U の、単位の変換で表すことができる演算です。 \ otimes \begin{cases} V \ket{\psi} & \t extrm{if} (b_0 b_1 \ cドット b_ {n-1}) \\ \\ = \texttt{bits} \ket{\psi} & \textrm{otherwise} \end{cases}, \end{align} ここで $V $ は、 `oracle`操作のアクションを表すミリ秒変換です。
remarks: >-
  と`bits` `controlRegister`の長さは同じである必要があります。


  ブール型の配列`bits`と1つの`oracle`値を指定すると、この関数の出力は、次の手順を実行する操作になります。


  * の要素`X`に`false`対応する制御レジスタの各 qubit に操作を適用し`bits`ます。

  * コントロール`Controlled oracle`とターゲットレジスタに適用します。

  * コントロールレジスタ`X`を元の状態に戻すために、 `bits`の要素に`false`対応する各 qubit に操作を適用します。


  ファンクタの出力は、 `bits`がと等しい特殊`ControlledOnBitString`なケースです`[true, ..., true]` `Controlled`
examples: >-
  次のコードスニペットは同等です。


  ```qsharp

  (ControlledOnBitString(bits, oracle))(controlRegister, targetRegister);

  ```


  and


  ```qsharp

  within {
      ApplyPauliFromBitString(PauliX, false, bits, controlRegister);
  } apply {
      Controlled oracle(controlRegister, targetRegister);
  }

  ```


  次のコードでは、{1}{2}状態 $ \ frac ({00} \ket-{01} \ket +{10} \ket +{11}\ket) $ を準備します。


  ```qsharp

  using (register = Qubit[2]) {
      ApplyToEach(H, register);
      (ControlledOnBitString([false], Z))(register[0..0], register[1]);
  }

  ```
syntax: "function ControlledOnBitString (bits : Bool[], oracle : ('T => Unit is Adj + Ctl)) : ((Qubit[], 'T) => Unit is Adj + Ctl)"
input:
  content: "(bits : Bool[], oracle : ('T => Unit is Adj + Ctl))"
  types:
  - name: bits
    summary: 指定されたユニタリ操作を制御するビット文字列。
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: oracle
    summary: ターゲットレジスタに適用されるユニタリ操作。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: ((Qubit[], 'T) => Unit is Adj + Ctl)
  types:
  - summary: コントロールのレジスタの状態`oracle`がビットマスク`bits`に対応している場合に、ターゲットのレジスタに適用されるユニタリ操作。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: d5a6223c130150f42f83044aec19b1d5a875bb1d
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82680357"
