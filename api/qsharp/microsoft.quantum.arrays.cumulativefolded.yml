### YamlMime:QSharpType
uid: microsoft.quantum.arrays.cumulativefolded
name: CumulativeFolded
type: function
namespace: microsoft.quantum.arrays
summary: >-
  マップされたフォールドを1つの関数に結合します


  この関数は、 `fn` 初期状態から開始 `state` し、初期状態を含まないすべての中間値を返す、配列を通じて関数を反復処理します。
examples: >-
  ```Q#

  // same as sums = [1, 3, 6, 10, 15]

  let sums = CumulativeFolded(PlusI, 0, SequenceI(1, 5));

  ```
syntax: "function CumulativeFolded (fn : (('State, 'T) -> 'State), state : 'State, array : 'T[]) : 'State[]"
input:
  content: "(fn : (('State, 'T) -> 'State), state : 'State, array : 'T[])"
  types:
  - name: fn
    summary: 配列に対して折りたたむ関数
    isFunction: true
    input:
      types:
      - uid: "'State"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - uid: "'State"
        isLocal: true
  - name: state
    summary: 折りたたむ初期状態
    uid: "'State"
    isLocal: true
  - name: array
    summary: 折りたたむ値の配列
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'State[]"
  types:
  - summary: >-
      最終状態を含むすべての中間状態。初期状態は含まれません。

      出力配列の長さは、と同じ長さです `array` 。
    isArray: true
    uid: "'State"
    isLocal: true
typeParameters:
- uid: "'State"
  summary: 関数が操作する状態の種類 `fn` (つまり、最初の入力としてを受け取り、を返す)。
- uid: "'T"
  summary: 要素の型 `array` 。
metadata:
  ms.openlocfilehash: 02779107bd5556a7f94e8a9ae2798cef98675221
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91494305"
