### YamlMime:QSharpType
uid: microsoft.quantum.characterization.estimatefrequencya
name: EstimateFrequencyA
type: operation
namespace: microsoft.quantum.characterization
summary: Adjointable と測定値の準備を行うと、は、 `Zero` 指定された数の試行を実行して、その測定が成功する頻度 (を返します) を推定します。
remarks: Adjointable 操作の場合、操作の呼び出しなどの特定の仮定を行うと、qubits がまったく同じ状態になるように準備することができます。これにより、ターゲットマシンでパフォーマンスを最適化することができます。
syntax: 'operation EstimateFrequencyA (preparation : (Qubit[] => Unit is Adj), measurement : (Qubit[] => Result), nQubits : Int, nMeasurements : Int) : Double'
input:
  content: '(preparation : (Qubit[] => Unit is Adj), measurement : (Qubit[] => Result), nQubits : Int, nMeasurements : Int)'
  types:
  - name: preparation
    summary: 入力レジスタに指定された状態 $ \rho $ を準備する adjointable 操作 ($ $P)。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
  - name: measurement
    summary: 対象の測定値を表す $ $M 演算。
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Result
  - name: nQubits
    summary: 準備と測定がそれぞれ作用する qubits の数。
    isPrimitive: true
    uid: Int
  - name: nMeasurements
    summary: 対象の頻度を推定するために測定を実行する回数。
    isPrimitive: true
    uid: Int
output:
  content: Double
  types:
  - summary: '\Hat{p} (P (\ket{00 \ ドット 0} \bra{00 \) $) $ が返さ $M れる頻度の推定 $ $ は、 `Zero` バイアスをかける二項分出し $ \hat{p} = n \_ {\uparrow}/n {\text{measurements}} $ を使用して取得し \_ ます。ここで、$n \_ {\uparrow} $ は観測された結果の数です `Zero` 。'
    isPrimitive: true
    uid: Double
metadata:
  ms.openlocfilehash: 11d81161aab2a9757f9309e20a971e31f1dc7533
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91477697"
