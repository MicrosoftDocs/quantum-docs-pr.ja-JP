### YamlMime:QSharpType
uid: microsoft.quantum.arrays.zip4
name: Zip4
type: function
namespace: microsoft.quantum.arrays
summary: 4つの配列がある場合、4組の新しい配列を返して、各4組に各元の配列の要素が格納されるようにします。
syntax: "function Zip4 (first : 'T1[], second : 'T2[], third : 'T3[], fourth : 'T4[]) : ('T1, 'T2, 'T3, 'T4)[]"
input:
  content: "(first : 'T1[], second : 'T2[], third : 'T3[], fourth : 'T4[])"
  types:
  - name: first
    summary: 各組の最初の要素の値を格納している配列。
    isArray: true
    uid: "'T1"
    isLocal: true
  - name: second
    summary: 各組の2番目の要素の値を格納している配列。
    isArray: true
    uid: "'T2"
    isLocal: true
  - name: third
    summary: 各組の3番目の要素の値を格納している配列。
    isArray: true
    uid: "'T3"
    isLocal: true
  - name: fourth
    summary: 各組の4番目の要素の値を格納している配列。
    isArray: true
    uid: "'T4"
    isLocal: true
output:
  content: ('T1, 'T2, 'T3, 'T4)[]
  types:
  - summary: それぞれの形式の4組のを格納 `(first[idx], second[idx], third[idx], fourth[idx])` している配列 `idx` 。 4つの配列の長さが等しくない場合、出力は入力の短い方の長さになります。
    isArray: true
    types:
    - uid: "'T1"
      isLocal: true
    - uid: "'T2"
      isLocal: true
    - uid: "'T3"
      isLocal: true
    - uid: "'T4"
      isLocal: true
typeParameters:
- uid: "'T1"
  summary: 最初の配列要素の型。
- uid: "'T2"
  summary: 2番目の配列要素の型。
- uid: "'T3"
  summary: 3番目の配列要素の型。
- uid: "'T4"
  summary: 4番目の配列要素の型。
seeAlso:
- zip
- zip3
metadata:
  ms.openlocfilehash: 437027a767ea7a2c49fd3b8dfa73858c847942c6
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89351341"
