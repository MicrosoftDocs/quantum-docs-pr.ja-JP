### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applypermutationusingdecompositionwithvariableorder
name: ApplyPermutationUsingDecompositionWithVariableOrder
type: operation
namespace: microsoft.quantum.synthesis
summary: >-
  分解ベースの合成を使用する順列を指定して、クォンタムの状態の振幅を Permutes します。


  この操作は、変数の順序を指定できるのより一般的なバージョンです @"microsoft.quantum.synthesis.applypermutationusingdecomposition" 。 変数の順序が異なると、制御ゲートに使用される分解シーケンスと真理テーブルが変更され @"microsoft.quantum.intrinsic.x" ます。  したがって、変数の順序を変更すると、順列を実現するために使用されるゲート全体の数が変わります。
examples: >-
  操作を合成するには `SWAP` :


  ```Q#

  using (qubits = Qubit[2]) {
    ApplyPermutationUsingDecompositionWithVariableOrder([0, 2, 1, 3], [1, 0], LittleEndian(qubits));
  }

  ```
syntax: 'operation ApplyPermutationUsingDecompositionWithVariableOrder (perm : Int[], variableOrder : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(perm : Int[], variableOrder : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: 0から始まる $ 2 ^ n $ 要素の順列。
    isArray: true
    isPrimitive: true
    uid: Int
  - name: variableOrder
    summary: 0から始まる $ elements $n の順列。
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: 順列が適用される $n $ qubits の一覧。
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecomposition
- microsoft.quantum.synthesis.applypermutationusingtransformation
metadata:
  ms.openlocfilehash: 294eac666a4334ce484f545606dfc65b91a3478e
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91482525"
