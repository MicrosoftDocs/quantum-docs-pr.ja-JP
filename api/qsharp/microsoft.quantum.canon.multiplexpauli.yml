### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexpauli
name: MultiplexPauli
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  Qubits の配列に条件付きの回転を適用します。


  これにより、$n $ qubit number $ \ket{j} $ によって制御されている場合に、single qubit p Li operator $P $ によって回転を実行する、乗算によって制御される $U $ に適用されます。


  $U = \ sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes e ^ {i P > $。
remarks: $ 2 ^ n $ 未満の値が指定されている場合、`coefficients` には要素 $0.0 $ > が埋め込まれます。
syntax: 'operation MultiplexPauli (coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
input:
  content: '(coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: coefficients
    summary: '最大で $ 2 ^ n $ 係数 $ & # の配列。 $J $ th 係数は、リトルエンディアン形式でエンコードされた数値の状態 $ \ket{j} $ にインデックスを付けます。'
    isArray: true
    isPrimitive: true
    uid: Double
  - name: pauli
    summary: 回転の軸を決定する p$P li 演算子。
    isPrimitive: true
    uid: Pauli
  - name: control
    summary: 数値の状態をリトルエンディアン形式でエンコードする $-qubit コントロールレジスタ $n ます。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: $E ^ {i P > $ によって回転される1つの qubit レジスタ。
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: efc5e1cef8574528eeb124100c4d5f875fc2e0e3
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73227748"
