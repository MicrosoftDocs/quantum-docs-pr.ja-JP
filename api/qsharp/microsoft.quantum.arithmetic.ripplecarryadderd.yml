### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.ripplecarryadderd
name: RippleCarryAdderD
type: operation
namespace: microsoft.quantum.arithmetic
summary: >-
  元に戻すことができ、2つの整数がインプレース適用されます。

  LittleEndian レジスタにエンコードされた2つの $n $ ビット整数 `xs` `ys` と、qubit が渡された場合、演算は2つの整数の合計を計算します。この2つの整数は、結果の最下位の $n $ が保持され、 `ys` 実行ビットは qubit に xor され `carry` ます。
remarks: 指定された制御操作は、操作の対称および相互キャンセルを利用して、すべての操作にコントロールを追加する既定の実装を改善します。
syntax: 'operation RippleCarryAdderD (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit) : Unit'
references: >-
  - Draper: "Quantum コンピューターでの追加"、2000。
    https://arxiv.org/abs/quant-ph/0008033
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, carry : Qubit)'
  types:
  - name: xs
    summary: LittleEndian qubit レジスタは、最初の整数 summand をエンコードします。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: LittleEndian qubit レジスタエンコーディング2番目の整数 summand は、合計の最下位のビット $n を保持するように変更されています。
    uid: microsoft.quantum.arithmetic.littleendian
  - name: carry
    summary: キャリー qubit, は、合計の最上位ビットを xor しています。
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 96cfea494eeeab38e2a3b0ed4648a1bf8e8a6ccc
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91476133"
