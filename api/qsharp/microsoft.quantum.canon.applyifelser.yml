### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyifelser
name: ApplyIfElseR
type: operation
namespace: microsoft.quantum.canon
summary: >-
  古典的な結果の値に応じて、2つの操作のいずれかを適用します。


  結果が返された場合 `result` 、 `zeroOp` `zeroInput` は、がと等しいときにを入力として操作を適用し、when にを `result` 適用し `Zero` `oneOp(oneInput)` `result == One` ます。
syntax: "operation ApplyIfElseR (result : Result, (zeroOp : ('T => Unit), zeroInput : 'T), (oneOp : ('U => Unit), oneInput : 'U)) : Unit"
input:
  content: "(result : Result, (zeroOp : ('T => Unit), zeroInput : 'T), (oneOp : ('U => Unit), oneInput : 'U))"
  types:
  - name: result
    summary: またはが適用されているかどうかを判断するために使用される測定結果 `zeroOp` `oneOp` 。
    isPrimitive: true
    uid: Result
  - name: zeroOp
    summary: に適用される操作 `result == Zero` 。
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: zeroInput
    summary: 時に提供される入力 `zeroOp` `result == Zero` 。
    uid: "'T"
    isLocal: true
  - name: oneOp
    summary: に適用される操作 `result == One` 。
    isOperation: true
    input:
      types:
      - uid: "'U"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: oneInput
    summary: 時に提供される入力 `oneOp` `result == One` 。
    uid: "'U"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: '`zeroOp`条件付きで適用される操作の入力型。'
- uid: "'U"
  summary: '`oneOp`条件付きで適用される操作の入力型。'
seeAlso:
- microsoft.quantum.canon.applyifzero
- microsoft.quantum.canon.applyifone
- microsoft.quantum.canon.applyifelserc
- microsoft.quantum.canon.applyifelsera
- microsoft.quantum.canon.applyifelserca
metadata:
  ms.openlocfilehash: 2af678130808d5ba909da3fdb3a0f2b0663421fc
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91473175"
